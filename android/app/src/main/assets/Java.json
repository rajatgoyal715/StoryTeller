[
  {
    "link": "https://blog.aritraroy.in/50-ultimate-resources-to-master-android-development-15165d6bc376?source=---------0-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*wYkItLZ-V1XcOET4t2fUBQ.jpeg",
    "author": "",
    "date": "Mar 17",
    "photo": "https://cdn-images-1.medium.com/max/800/1*madcyMHRPguLXU3VoJt4CQ.gif",
    "head": "50+ Ultimate Resources to Master Android Development",
    "contents": "I still remember the day a few years back when I started Android development and stepped into the vast world of unknown with almost no idea where to start and what to do next.Searching on Google, stumbling miscellaneous articles and checking out StackOverflow answers were the only ways for me to gather knowledge on Android. Back then, I had a hard time finding good quality tutorials to learn from but with time I started knowing places where I could find useful resources to gather knowledge and improve my skills.In this article, I have collected a lot of resources that can prove to be highly useful for almost all Android developers, even if you are a beginner or a seasoned developer. This is an attempt to reduce your pain and help you get access to the right resources to master Android development.These are some of the resources that can prove to be invaluable to any Java programmer starting their Android development journey.An easy and beginner-friendly course developed by Google to learn the basics and fundamental concepts of Android development quickly.Simple, easy and a complete guide for all beginner-level Android developers willing to develop their first Android app.It is one of the best yet underrated resource that almost all Android developers should know right from the beginning of their development journey.If you are just stepping into the vast world of Android development, then it is quite obvious that you will get overwhelmed with a lot of new concepts and terms everywhere. Don’t worry, Google has designed an interactive and easy-to-use glossary with code examples to make your life a lot easier.The official training guide for Android developers from Google which can prove to be extremely useful for any beginner developer. The training covers all the basic stuff with a lot of code examples you need.A very insightful and resourceful article for all newbie developers starting out their Android development journey. Always learn from others experiences, mistakes and never repeat them yourself.Not familiar with XML? Then it is the perfect time for you to learn it as you will need to use it heavily to design your layouts in Android. It is very easy and should not take you much time to grasp.If you are going to communicate with the internet services and make API calls from your Android app, then it is very important for you to have a good understanding of HTTP and REST.If you have been doing Android development for a year or two, then here are some amazing resources which will help you to increase your knowledge and skills on various aspects of Android development further.A well-designed course by Google which is perfect for any intermediate level Android developer to boost up their development skills further.If you have been doing Android development for some time and is struggling to find elegant ways to solve critical software development problems, then these are some of the most common design patterns that can help you a lot.Android has a very rich community of open-source apps, but how do you know which are the best ones for you to learn and improve your development skills from. Don’t worry, this article has got you fully covered.Learn about the best approach to architect your complex Android app for better development, testing, debugging and maintenance.We all know how complex and frustrating Android’s Activity and Fragment lifecycle can sometimes get, but there are other “more modern” ways of creating apps as well and this article can give you a clear idea about it.Jump into the world of reactive programming on Android with this easy and useful tutorial to get you quickly on board.Get an in-depth insight into the Android View constructors, how they work and how you can make the most use of them while developing your own custom views.If you want to understand how the asynchronous world of Android framework is built and leverage it to make smooth, fast and high-quality applications, this is exactly what you need to look at.An in-depth tutorial on understanding how Views and ViewGroups work in Android and how you can create your own custom UI components with perfection.Not many developers properly understand how the different launch modes in Android work and how you can make use of these to create the perfect navigation in your app.You have been using libraries in your Android apps for quite a while now and want to contribute to the community as well, here is a complete and in-depth guide for publishing your own library.Learn how you can make a smooth and successful launch of your Android app in Play Store that you have been developing for months.This Github repository can prove to be a gem for all those who want to learn about the different architectural tools and patterns to develop Android apps like a pro.If you are confused between developing web-apps and native apps and want to deliver easily discoverable and fast-loading apps, then this is something you cannot afford to miss.If you are developing Android apps for quite some time now and want to improve your productivity and development workflow then these are the tools that you surely need to check out.You have been using Android Studio almost every day to develop your apps but have probably never realized how powerful it actually is and there is so much you can do to make the most out of it.Following the best practices helps you to develop cleaner and better apps and it is even more important if you are developing with a team where it is very important for you to maintain a consistent development style for everyone to be on the same page.An easy and resourceful article explaining several aspects of Android development best practices.This article is all about the best practices of using the strings.xml resource file properly and making the most out of it.One of the best and the most complete resource about the best practices and guidelines of various aspects of Android development covering almost everything you need to know.Want to use Android in your company, then this article can help you learn the techniques of making the best use of Android for Work in your enterprise.A quick and extremely useful list of some of the best practices of Android development to ensure that you are always delivering high-quality Android apps.Effective Java (by Joshua Block) is considered to be one of the best books for writing high-quality maintainable Java code. This post focuses on how you can make the best use of those techniques and principles specifically in Android development.If you have chosen the reactive way of building Android apps, then these tips can surely help you avoid some common mistakes and get the best out of it.An in-depth article about some of the common techniques of storing secrets (password, API keys and other sensitive information) in Android apps and their pros and cons.An app is always incomplete without a good user interface. A clean and beautiful UI is what makes your app appealing, gives it the wowing factor and makes it stand out from the rest.A very well-written article giving you an in-depth insight into the world of Material Design for Android.Learn how you can create beautiful and meaningful animations in your Android app to wow your users and make it stand out from the rest.The freshly-baked ConstraintLayout completely changes the game when it comes to designing layouts for your Android apps. This article can help you understand the basics of ConstraintLayout and give it a quick start.Design better and more high-quality apps by not making these common mistakes while embracing Material Design in your Android app.A very insightful article giving you a more scientific perspective into Material Design and how you can put it to the best use while designing your app.Some interesting bonus resources you will never want to miss.If you want to keep yourself updated with the latest development happenings in the Android world, make sure to follow some of the expert Android developers on Twitter.Want to dive into the world of IoT using Android tools and its framework? Here is a good resource for you to start your journey.If you are interested and excited about developing apps for Android wearables, then here is a complete tutorial to get you started.A very interesting article about the nitty-gritty details of the Android resources and attributes you probably didn’t knew.Want to develop apps for the big screen TVs or make your already working apps to support this new platform? Here is quick and good introduction for you to get started.Want to stay updated with the latest development news, tutorials, and happenings in the Android world? Here are some of the best places for you to check out.Never miss out on the latest and greatest development news, articles, screencasts and other happenings of the Android world. Android Weekly offers free newsletters every week for you to stay updated with no effort.If you love listening to podcasts, then you will surely not want to miss the bi-weekly episodes discussing about various tools, patterns and best practices to become a better Android developer.One of the best and most up-to-date crowdsourced resource for Android developers where you will find guides and tutorials about almost everything in Android. And the best thing is that it is completely open-source for you to contribute to it as well.Get high-quality bite sized Android development screencasts on a wide-variety of development topics released every week.This is the place where you will find all essential information that you will need for designing the UI and UX of your app, hence the name “styling android”.Mark Murphy, popularly known for authoring the famous book, “Busy Coder’s Guide to Android Development” writes about some interesting stuff about Android development on his personal blog.This site covers well-written, in-depth tutorials on a lot of topics in Android development that can be invaluable for both beginners and intermediate-level Android developers.A very active community of Android developers from all over the world discussing and sharing information on various Android development related topics.This is the official blog through which Google communicates directly with the Android developers. All the latest development related news and announcements appear here first before anywhere else.I hope these resources will help you learn more about Android development and build better apps. If you found this useful, do share it with your friends and co-developers as well. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users."
  },
  {
    "link": "https://blog.aritraroy.in/what-my-2-years-of-android-development-have-taught-me-the-hard-way-52b495ba5c51?source=---------1-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*wYkItLZ-V1XcOET4t2fUBQ.jpeg",
    "author": "Aritra Roy",
    "date": "Aug 31, 2016",
    "photo": "https://cdn-images-1.medium.com/max/800/1*madcyMHRPguLXU3VoJt4CQ.gif",
    "head": "What 2 Years of Android Development Have Taught Me the Hard Way",
    "contents": "I still remember the day a few years back when I started Android development and stepped into the vast world of unknown with almost no idea where to start and what to do next.Searching on Google, stumbling miscellaneous articles and checking out StackOverflow answers were the only ways for me to gather knowledge on Android. Back then, I had a hard time finding good quality tutorials to learn from but with time I started knowing places where I could find useful resources to gather knowledge and improve my skills.In this article, I have collected a lot of resources that can prove to be highly useful for almost all Android developers, even if you are a beginner or a seasoned developer. This is an attempt to reduce your pain and help you get access to the right resources to master Android development.These are some of the resources that can prove to be invaluable to any Java programmer starting their Android development journey.An easy and beginner-friendly course developed by Google to learn the basics and fundamental concepts of Android development quickly.Simple, easy and a complete guide for all beginner-level Android developers willing to develop their first Android app.It is one of the best yet underrated resource that almost all Android developers should know right from the beginning of their development journey.If you are just stepping into the vast world of Android development, then it is quite obvious that you will get overwhelmed with a lot of new concepts and terms everywhere. Don’t worry, Google has designed an interactive and easy-to-use glossary with code examples to make your life a lot easier.The official training guide for Android developers from Google which can prove to be extremely useful for any beginner developer. The training covers all the basic stuff with a lot of code examples you need.A very insightful and resourceful article for all newbie developers starting out their Android development journey. Always learn from others experiences, mistakes and never repeat them yourself.Not familiar with XML? Then it is the perfect time for you to learn it as you will need to use it heavily to design your layouts in Android. It is very easy and should not take you much time to grasp.If you are going to communicate with the internet services and make API calls from your Android app, then it is very important for you to have a good understanding of HTTP and REST.If you have been doing Android development for a year or two, then here are some amazing resources which will help you to increase your knowledge and skills on various aspects of Android development further.A well-designed course by Google which is perfect for any intermediate level Android developer to boost up their development skills further.If you have been doing Android development for some time and is struggling to find elegant ways to solve critical software development problems, then these are some of the most common design patterns that can help you a lot.Android has a very rich community of open-source apps, but how do you know which are the best ones for you to learn and improve your development skills from. Don’t worry, this article has got you fully covered.Learn about the best approach to architect your complex Android app for better development, testing, debugging and maintenance.We all know how complex and frustrating Android’s Activity and Fragment lifecycle can sometimes get, but there are other “more modern” ways of creating apps as well and this article can give you a clear idea about it.Jump into the world of reactive programming on Android with this easy and useful tutorial to get you quickly on board.Get an in-depth insight into the Android View constructors, how they work and how you can make the most use of them while developing your own custom views.If you want to understand how the asynchronous world of Android framework is built and leverage it to make smooth, fast and high-quality applications, this is exactly what you need to look at.An in-depth tutorial on understanding how Views and ViewGroups work in Android and how you can create your own custom UI components with perfection.Not many developers properly understand how the different launch modes in Android work and how you can make use of these to create the perfect navigation in your app.You have been using libraries in your Android apps for quite a while now and want to contribute to the community as well, here is a complete and in-depth guide for publishing your own library.Learn how you can make a smooth and successful launch of your Android app in Play Store that you have been developing for months.This Github repository can prove to be a gem for all those who want to learn about the different architectural tools and patterns to develop Android apps like a pro.If you are confused between developing web-apps and native apps and want to deliver easily discoverable and fast-loading apps, then this is something you cannot afford to miss.If you are developing Android apps for quite some time now and want to improve your productivity and development workflow then these are the tools that you surely need to check out.You have been using Android Studio almost every day to develop your apps but have probably never realized how powerful it actually is and there is so much you can do to make the most out of it.Following the best practices helps you to develop cleaner and better apps and it is even more important if you are developing with a team where it is very important for you to maintain a consistent development style for everyone to be on the same page.An easy and resourceful article explaining several aspects of Android development best practices.This article is all about the best practices of using the strings.xml resource file properly and making the most out of it.One of the best and the most complete resource about the best practices and guidelines of various aspects of Android development covering almost everything you need to know.Want to use Android in your company, then this article can help you learn the techniques of making the best use of Android for Work in your enterprise.A quick and extremely useful list of some of the best practices of Android development to ensure that you are always delivering high-quality Android apps.Effective Java (by Joshua Block) is considered to be one of the best books for writing high-quality maintainable Java code. This post focuses on how you can make the best use of those techniques and principles specifically in Android development.If you have chosen the reactive way of building Android apps, then these tips can surely help you avoid some common mistakes and get the best out of it.An in-depth article about some of the common techniques of storing secrets (password, API keys and other sensitive information) in Android apps and their pros and cons.An app is always incomplete without a good user interface. A clean and beautiful UI is what makes your app appealing, gives it the wowing factor and makes it stand out from the rest.A very well-written article giving you an in-depth insight into the world of Material Design for Android.Learn how you can create beautiful and meaningful animations in your Android app to wow your users and make it stand out from the rest.The freshly-baked ConstraintLayout completely changes the game when it comes to designing layouts for your Android apps. This article can help you understand the basics of ConstraintLayout and give it a quick start.Design better and more high-quality apps by not making these common mistakes while embracing Material Design in your Android app.A very insightful article giving you a more scientific perspective into Material Design and how you can put it to the best use while designing your app.Some interesting bonus resources you will never want to miss.If you want to keep yourself updated with the latest development happenings in the Android world, make sure to follow some of the expert Android developers on Twitter.Want to dive into the world of IoT using Android tools and its framework? Here is a good resource for you to start your journey.If you are interested and excited about developing apps for Android wearables, then here is a complete tutorial to get you started.A very interesting article about the nitty-gritty details of the Android resources and attributes you probably didn’t knew.Want to develop apps for the big screen TVs or make your already working apps to support this new platform? Here is quick and good introduction for you to get started.Want to stay updated with the latest development news, tutorials, and happenings in the Android world? Here are some of the best places for you to check out.Never miss out on the latest and greatest development news, articles, screencasts and other happenings of the Android world. Android Weekly offers free newsletters every week for you to stay updated with no effort.If you love listening to podcasts, then you will surely not want to miss the bi-weekly episodes discussing about various tools, patterns and best practices to become a better Android developer.One of the best and most up-to-date crowdsourced resource for Android developers where you will find guides and tutorials about almost everything in Android. And the best thing is that it is completely open-source for you to contribute to it as well.Get high-quality bite sized Android development screencasts on a wide-variety of development topics released every week.This is the place where you will find all essential information that you will need for designing the UI and UX of your app, hence the name “styling android”.Mark Murphy, popularly known for authoring the famous book, “Busy Coder’s Guide to Android Development” writes about some interesting stuff about Android development on his personal blog.This site covers well-written, in-depth tutorials on a lot of topics in Android development that can be invaluable for both beginners and intermediate-level Android developers.A very active community of Android developers from all over the world discussing and sharing information on various Android development related topics.This is the official blog through which Google communicates directly with the Android developers. All the latest development related news and announcements appear here first before anywhere else.I hope these resources will help you learn more about Android development and build better apps. If you found this useful, do share it with your friends and co-developers as well. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users.I still remember that day back in 2014 when I decided to start Android development, and that was one of the best decisions I took in my life. It has been around two and a half years now and I had the chance to learn and un-learn a lot of things in Android.Initially when I started, I didn’t have a mentor or someone who could guide me to do things the right way. I did a LOT of mistakes and also wasted a lot of time doing and later rectifying them.Later, after one and a half years, I got the chance to work with some really talented and experienced Android developers, who guided me and helped me shape things in a much better way. Both of these phases helped me learn a hell lot of things in the HARD way. I learned what TO DO and most importantly what NOT TO DO.It has been quite some time that I have been trying to help other developers in ways possible to me, directly and indirectly. Here are my StackOverflow and Github profiles.In this article, I will be sharing some of the gems that I have collected in these years. It might help someone to get started faster and not repeat the mistakes that I once did.Disclaimer: I will mainly be focussing on Android and some concepts of programming and product development in this article, so if you are not familiar with any of these, you might not want to read any further. Others, just dive in. :-)Initially, I had a bad idea of not using open-source libraries. Whatever I needed, I just wanted to make it myself. It’s was seriously a terrible idea.If you have a problem while developing your app, and if that problem has been solved by someone else before and in a good way, why not use that? You can save yourself a lot of time.Focus more on the core business logic of your app. If you want to make network calls in your app, you don’t need to make a Retrofit yourself.Bonus: Android Arsenal maintains a database of almost all Android libraries ever made. Go check it out.There are lots and lots of open-source libraries available in Github for you to use for FREE. But don’t get too excited and start using libraries blindly.Check the number of stars that particular library has, the more the better. Check if the author of that library have also created some other popular libraries as well. Check the issues (both open and closed), which can give you a better idea of how robust and stable the library is in production.If you can afford the time, you should dive into the code of that library and check yourself if its really worth it.You just want to ensure that the code you are going to use is reliable, bug-free and high-quality.Pro Tip: Try out any library hosted directly from the command line using Dryrun.We spent most of our time reading others code than writing ourselves. If you are not doing that, START today.Whatever code you are able to write today is only because you have read and learned something, somewhere, someday. It’s just a reflection of what you already know. You can only grow and improve yourself by reading and learning from other’s work.The great thing about Android is that it is a completely open-source platform. Dive into the code and check how they have implemented the framework. There are thousands of open-source libraries in Github. Just pick a library and see how the developer have implemented it.Bonus: Here is a curated list of some of the best libraries and here is a list of almost all open-source Android apps available. You are welcome :-)If you compare coding with writing, then coding standards is like your handwriting.As you would be reading more of others code, other people will also be reading a lot of your code and you don’t want to scare the shit out of them, do you? And if you are working in an organization and collaborating with other developers heavily, do take special care about it.Write short, clean and readable code that YOU and people reading your code would enjoy thoroughly. Your code should read like a story.Don’t complain if you write a piece of code and your colleagues don’t talk to you for a few days.Bonus: To start with, you must thoroughly go through this and this.Never ever, ever make the mistake of releasing your app on the Play Store without using ProGuard. ProGuard not only minifies your code, but it obfuscates your code making it harder for reverse-engineers to understand, replicate and manipulate it.Its absolutely free and comes bundled with the Android SDK, and there is absolutely no reason for you not to use it.I have seen several developers releasing their app on the market without ProGuard. It should not take more than a few hours for a not-so-skilled hacker to manipulate an the app released without Proguard.Pro Tip: But if you want top-notch security, then ProGuard is like a cardboard while you need a safe, and here it is, DexGuard.You will forever thank yourself for choosing a proper architecture in the first place.You can use MVP (Model-View-Presenter) architecture which can decouple your code into different easy-to-manage layers thereby improving code flexibility and greatly reducing maintenance time.There is a great demo project for you to start. And if you are having a hard time grasping it, here is a detailed guide for the beginners.Bonus: Do give a check at this, this and most importantly this. All of these can greatly help you in implementing MVP in your project.If you work for any organization playing the role of “just” an Android developer, you probably won’t need to be too concerned about this, as there are UI/UX designers to take care of this.But if you are an individual developer, you need to get this straight into your head. I have seen developers creating really good apps with great functionality, but the UI looks horrible and the UX makes it a pain to use.Design a clean, simple and beautiful interface that is easy on the eyes. You should not just think like a developer, rather you should concentrate on igniting the hidden designer inside you.Try to create a lasting impression on your users by designing a beautiful UI, so that they keep coming back to your app more often than others and tend to convert more (buy your premium version, maybe).Bonus: You can always get design inspiration from popular designers of Dribble or MaterialUp. And there is this book you probably would love to read if you are interested in design.If you want to create a truly amazing app, you need to heavily rely on analytics tools to analyze the performance and usage of different parts of your app.By analytics, I refer to both crash reporting and app usage tracking and you need both of them.Whatever you do, you can never make something perfect. When real users will start using your app on a variety of Android devices and on various Android versions available, you will even see some of your best written code to fall flat on the ground.Crash reporting tools can help you to track and fix them, one crash at a time.You also need to start thinking like a marketer and analyze the usage of various portions of your app. This is what will help you bridge the gap between what you made and what your users’ actually want.Pro Tip: Use Firebase Crash Reporting and Analytics tools and you can thank me later.If you are an individual developer, you have to think beyond being “just a developer” and have to understand marketing as well.If you are serious about your work and want it to reach a large audience, you need to invest your time and money in properly marketing your app. But before starting your marketing campaigns, ensure that your app is absolutely stable with all features ready. You want maximum conversions from every dime you spend, right?Spend time researching who your competitors are and how you can beat them. Identify the ones you can compete immediately and the ones you have to keep aside for a future fight.Pro Tip: Here is an affordable market analysis tool, I love to use.This is something that most of us generally don’t do, but you should and you need to.There is a big difference between writing code and writing “optimized” code. Write code that runs quickly, takes less memory and consumes less device storage.An unoptimized app works well under normal circumstances, but when put to different stressful situations, it can show you its true colors.Check the amount of memory used by your app and look for memory leaks. Remember, a tiny leak can sink a big ship. Spend time on understanding how the Garbage Collector works in Java, create heap dumps and analyze your live objects.Pro Tip: Use Leak Canary to detect your memory leaks. It can save you a lot of time by automating this task for you.It’s very very likely that you are using Android Studio to develop Android apps and using Gradle as your build system. Gradle is great but its slow and it becomes slower than a snail when your project size starts to grow in size.I remember the countless hours I have wasted just sitting and waiting for the Gradle builds to finish. On heavy work days, I easily wasted around an hour on just Gradle builds and that’s like 5 hours a week draining down the gutter.But, there are ways to speed it up too.You can follow this and this post to significantly improve your build speeds. My build time dropped from 4 minutes to less than 30 seconds after proper optimization.There is nothing more important than testing. This is something that should be at the top of your list.Test your app as thoroughly as possible. Spend time for writing automated test cases. Create various stressful situations for your app and see if it can survive.I had once made the mistake of releasing my app out of hurry and didn’t spend proper time testing it. I was waiting for my users to face bugs, report it and then I would go and fix them.Never, ever, ever do that. You might save a day, or two, or a week by cutting down time from testing, but will probably have to spend more than twice later.Fragmentation is one of the biggest problems in Android and Google seems reluctant to fix it, but you have to live with it.There are a huge variety of Android devices with different screen sizes and hardware specifications from a plethora of different device manufactures who customize the OS to their heart’s content.Added to that are the various Android versions where Google adds/removes API functionality out of nowhere to increase your workload ever further (an example here).For example, not a single Android developer has finished an app without using SharedPreferences API. It’s so common, yet it was broken in Samsung Galaxy S with Android 2.2 (bug report here).Spend more time creating different layouts for different screen sizes. Test on different devices, having different versions, different specifications and from different OEMs.If you are still not using Git, go ahead and start using it right away.When I started Android development, I was unfortunate enough not to know what the fudge Git was. I used to copy my entire project everyday and keep one backup in my hard drive and another in the cloud. Seems foolish? Yes, it absolutely was.Git can dramatically improve your workflow. If someone asks me to name a tool that I use everyday and can’t stop using? It’s Git and Git every time.And probably after using it for a few days you would fall in love with it and want to know how Git works internally, so here it is ready for you.And after some time, you would be starting a big project yourself and get confused on how you should maintain a proper branching model, so here you go.Bonus: If you are just starting out and can’t afford to pay the monthly subscription fee for maintaining private repositories in GitHub, you can try BitBucket which lets you do just that for free.The open-source nature of Android is what makes it vulnerable to attacks. Every Android app can be decompiled, reverse-engineered, ripped open, analyzed and manipulated with ease.You don’t want that to happen to your app, right?You should know how to securely store API keys locally in your app. If you are dealing with sensitive data of the users, then you must know how to encrypt them, what algorithm to choose (secure yet fast).You should also store the encryption keys securely either in the server or locally (if needed). You should prevent your app data from being backed up using the ADB (Android Debug Bridge). If you are storing sensitive data in the database, consider obfuscating it.If your app has a premium version which gets cracked and gets released for free. You would incur a serious loss in business, right?There are several things you can do to prevent your app from getting tampered. There is nothing like 100% security. Any skilled and determined hacker with the right resources, tools and patience can crack your app.All you want to do is make it difficult, rather very difficult for the hacker to crack it.Bonus: Reading this and this should be a good start towards securing your app.Everyone loves to use a high-end Android smartphone, so do I. But remember to keep it for your personal use only and never use it for development purposes.A high-end device will hide a lot of flaws while developing your app. Suppose you are doing something in the UI thread which makes its way for a laggy UI, but on a powerful device, you may never ever notice that.An old, low-end device, dumped with lots of apps makes it ideal for a development device.This is an investment that will pay you forever.While developing big and complex apps, you will face some common problems which have probably been solved before by someone more competent than you, that’s when design patterns comes into play.Start spending some time right from today to learn the Java Design Patterns. Here is a Github project that demonstrates all the design patterns known to mankind.To start off, learn the most important ones like Singleton, Adapter, Factory Method, Iterator, Dependency Injection, Event Driven Architecture, Builder, Callback, Strategy, Facade and Producer Consumer.Seems like a lot? It actually isn’t. You will start loving them once you dive in.Pro Tip: Read books like GoF’s Design Patterns, Refactoring by Martin Fowler and Effective Java by Joshua Bloch.We all have got a lot of help from people around us and from the Internet. Lets admit it.Whenever you have a problem, the first thing you would do is Google that and find the first link from StackOverflow. Sometimes you are in a hurry and you end up copying and pasting the solution from the answer having the highest votes.Ever thought the number of libraries you are using from Github for free and how they have greatly reduced your development time and efforts. Its because someone somewhere has taken the time to build it and contribute to make the community better.Remember the day, when you were stuck in understanding a difficult concept or something which is entirely new to you, and you end up finding an awesome blog post which made it super easy for you. Its because somebody skipped a movie date and wrote that article.Its your time to give back as well. The more you give, the more you get back in return.We all are busy in our own work and we find it too difficult to manage time and do something for others. But try to find some time every week to contribute and make this Android community richer.I have tried to share some of the lessons that I have learned in this short journey with Android development. I will continue my journey, learn more and share even more. I hope it helps someone and makes their life a bit easier.If you like this article, do give it a thumbs up, comment on it and share with with your friends."
  },
  {
    "link": "https://medium.com/@roylelittlemonkeys/java-8-language-features-%E0%B9%83%E0%B8%AB%E0%B8%A1%E0%B9%88%E0%B8%9A%E0%B8%99-android-cd97bd66abd4?source=---------2-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/0*Lrf_CAEcGKhhm299.jpg",
    "author": "",
    "date": "Feb 15",
    "photo": "https://cdn-images-1.medium.com/max/800/1*eipS-Xe9U4hG0jkH5H6HYQ.png",
    "head": "Java 8 Language features ใหม่บน Android",
    "contents": "I still remember the day a few years back when I started Android development and stepped into the vast world of unknown with almost no idea where to start and what to do next.Searching on Google, stumbling miscellaneous articles and checking out StackOverflow answers were the only ways for me to gather knowledge on Android. Back then, I had a hard time finding good quality tutorials to learn from but with time I started knowing places where I could find useful resources to gather knowledge and improve my skills.In this article, I have collected a lot of resources that can prove to be highly useful for almost all Android developers, even if you are a beginner or a seasoned developer. This is an attempt to reduce your pain and help you get access to the right resources to master Android development.These are some of the resources that can prove to be invaluable to any Java programmer starting their Android development journey.An easy and beginner-friendly course developed by Google to learn the basics and fundamental concepts of Android development quickly.Simple, easy and a complete guide for all beginner-level Android developers willing to develop their first Android app.It is one of the best yet underrated resource that almost all Android developers should know right from the beginning of their development journey.If you are just stepping into the vast world of Android development, then it is quite obvious that you will get overwhelmed with a lot of new concepts and terms everywhere. Don’t worry, Google has designed an interactive and easy-to-use glossary with code examples to make your life a lot easier.The official training guide for Android developers from Google which can prove to be extremely useful for any beginner developer. The training covers all the basic stuff with a lot of code examples you need.A very insightful and resourceful article for all newbie developers starting out their Android development journey. Always learn from others experiences, mistakes and never repeat them yourself.Not familiar with XML? Then it is the perfect time for you to learn it as you will need to use it heavily to design your layouts in Android. It is very easy and should not take you much time to grasp.If you are going to communicate with the internet services and make API calls from your Android app, then it is very important for you to have a good understanding of HTTP and REST.If you have been doing Android development for a year or two, then here are some amazing resources which will help you to increase your knowledge and skills on various aspects of Android development further.A well-designed course by Google which is perfect for any intermediate level Android developer to boost up their development skills further.If you have been doing Android development for some time and is struggling to find elegant ways to solve critical software development problems, then these are some of the most common design patterns that can help you a lot.Android has a very rich community of open-source apps, but how do you know which are the best ones for you to learn and improve your development skills from. Don’t worry, this article has got you fully covered.Learn about the best approach to architect your complex Android app for better development, testing, debugging and maintenance.We all know how complex and frustrating Android’s Activity and Fragment lifecycle can sometimes get, but there are other “more modern” ways of creating apps as well and this article can give you a clear idea about it.Jump into the world of reactive programming on Android with this easy and useful tutorial to get you quickly on board.Get an in-depth insight into the Android View constructors, how they work and how you can make the most use of them while developing your own custom views.If you want to understand how the asynchronous world of Android framework is built and leverage it to make smooth, fast and high-quality applications, this is exactly what you need to look at.An in-depth tutorial on understanding how Views and ViewGroups work in Android and how you can create your own custom UI components with perfection.Not many developers properly understand how the different launch modes in Android work and how you can make use of these to create the perfect navigation in your app.You have been using libraries in your Android apps for quite a while now and want to contribute to the community as well, here is a complete and in-depth guide for publishing your own library.Learn how you can make a smooth and successful launch of your Android app in Play Store that you have been developing for months.This Github repository can prove to be a gem for all those who want to learn about the different architectural tools and patterns to develop Android apps like a pro.If you are confused between developing web-apps and native apps and want to deliver easily discoverable and fast-loading apps, then this is something you cannot afford to miss.If you are developing Android apps for quite some time now and want to improve your productivity and development workflow then these are the tools that you surely need to check out.You have been using Android Studio almost every day to develop your apps but have probably never realized how powerful it actually is and there is so much you can do to make the most out of it.Following the best practices helps you to develop cleaner and better apps and it is even more important if you are developing with a team where it is very important for you to maintain a consistent development style for everyone to be on the same page.An easy and resourceful article explaining several aspects of Android development best practices.This article is all about the best practices of using the strings.xml resource file properly and making the most out of it.One of the best and the most complete resource about the best practices and guidelines of various aspects of Android development covering almost everything you need to know.Want to use Android in your company, then this article can help you learn the techniques of making the best use of Android for Work in your enterprise.A quick and extremely useful list of some of the best practices of Android development to ensure that you are always delivering high-quality Android apps.Effective Java (by Joshua Block) is considered to be one of the best books for writing high-quality maintainable Java code. This post focuses on how you can make the best use of those techniques and principles specifically in Android development.If you have chosen the reactive way of building Android apps, then these tips can surely help you avoid some common mistakes and get the best out of it.An in-depth article about some of the common techniques of storing secrets (password, API keys and other sensitive information) in Android apps and their pros and cons.An app is always incomplete without a good user interface. A clean and beautiful UI is what makes your app appealing, gives it the wowing factor and makes it stand out from the rest.A very well-written article giving you an in-depth insight into the world of Material Design for Android.Learn how you can create beautiful and meaningful animations in your Android app to wow your users and make it stand out from the rest.The freshly-baked ConstraintLayout completely changes the game when it comes to designing layouts for your Android apps. This article can help you understand the basics of ConstraintLayout and give it a quick start.Design better and more high-quality apps by not making these common mistakes while embracing Material Design in your Android app.A very insightful article giving you a more scientific perspective into Material Design and how you can put it to the best use while designing your app.Some interesting bonus resources you will never want to miss.If you want to keep yourself updated with the latest development happenings in the Android world, make sure to follow some of the expert Android developers on Twitter.Want to dive into the world of IoT using Android tools and its framework? Here is a good resource for you to start your journey.If you are interested and excited about developing apps for Android wearables, then here is a complete tutorial to get you started.A very interesting article about the nitty-gritty details of the Android resources and attributes you probably didn’t knew.Want to develop apps for the big screen TVs or make your already working apps to support this new platform? Here is quick and good introduction for you to get started.Want to stay updated with the latest development news, tutorials, and happenings in the Android world? Here are some of the best places for you to check out.Never miss out on the latest and greatest development news, articles, screencasts and other happenings of the Android world. Android Weekly offers free newsletters every week for you to stay updated with no effort.If you love listening to podcasts, then you will surely not want to miss the bi-weekly episodes discussing about various tools, patterns and best practices to become a better Android developer.One of the best and most up-to-date crowdsourced resource for Android developers where you will find guides and tutorials about almost everything in Android. And the best thing is that it is completely open-source for you to contribute to it as well.Get high-quality bite sized Android development screencasts on a wide-variety of development topics released every week.This is the place where you will find all essential information that you will need for designing the UI and UX of your app, hence the name “styling android”.Mark Murphy, popularly known for authoring the famous book, “Busy Coder’s Guide to Android Development” writes about some interesting stuff about Android development on his personal blog.This site covers well-written, in-depth tutorials on a lot of topics in Android development that can be invaluable for both beginners and intermediate-level Android developers.A very active community of Android developers from all over the world discussing and sharing information on various Android development related topics.This is the official blog through which Google communicates directly with the Android developers. All the latest development related news and announcements appear here first before anywhere else.I hope these resources will help you learn more about Android development and build better apps. If you found this useful, do share it with your friends and co-developers as well. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users.I still remember that day back in 2014 when I decided to start Android development, and that was one of the best decisions I took in my life. It has been around two and a half years now and I had the chance to learn and un-learn a lot of things in Android.Initially when I started, I didn’t have a mentor or someone who could guide me to do things the right way. I did a LOT of mistakes and also wasted a lot of time doing and later rectifying them.Later, after one and a half years, I got the chance to work with some really talented and experienced Android developers, who guided me and helped me shape things in a much better way. Both of these phases helped me learn a hell lot of things in the HARD way. I learned what TO DO and most importantly what NOT TO DO.It has been quite some time that I have been trying to help other developers in ways possible to me, directly and indirectly. Here are my StackOverflow and Github profiles.In this article, I will be sharing some of the gems that I have collected in these years. It might help someone to get started faster and not repeat the mistakes that I once did.Disclaimer: I will mainly be focussing on Android and some concepts of programming and product development in this article, so if you are not familiar with any of these, you might not want to read any further. Others, just dive in. :-)Initially, I had a bad idea of not using open-source libraries. Whatever I needed, I just wanted to make it myself. It’s was seriously a terrible idea.If you have a problem while developing your app, and if that problem has been solved by someone else before and in a good way, why not use that? You can save yourself a lot of time.Focus more on the core business logic of your app. If you want to make network calls in your app, you don’t need to make a Retrofit yourself.Bonus: Android Arsenal maintains a database of almost all Android libraries ever made. Go check it out.There are lots and lots of open-source libraries available in Github for you to use for FREE. But don’t get too excited and start using libraries blindly.Check the number of stars that particular library has, the more the better. Check if the author of that library have also created some other popular libraries as well. Check the issues (both open and closed), which can give you a better idea of how robust and stable the library is in production.If you can afford the time, you should dive into the code of that library and check yourself if its really worth it.You just want to ensure that the code you are going to use is reliable, bug-free and high-quality.Pro Tip: Try out any library hosted directly from the command line using Dryrun.We spent most of our time reading others code than writing ourselves. If you are not doing that, START today.Whatever code you are able to write today is only because you have read and learned something, somewhere, someday. It’s just a reflection of what you already know. You can only grow and improve yourself by reading and learning from other’s work.The great thing about Android is that it is a completely open-source platform. Dive into the code and check how they have implemented the framework. There are thousands of open-source libraries in Github. Just pick a library and see how the developer have implemented it.Bonus: Here is a curated list of some of the best libraries and here is a list of almost all open-source Android apps available. You are welcome :-)If you compare coding with writing, then coding standards is like your handwriting.As you would be reading more of others code, other people will also be reading a lot of your code and you don’t want to scare the shit out of them, do you? And if you are working in an organization and collaborating with other developers heavily, do take special care about it.Write short, clean and readable code that YOU and people reading your code would enjoy thoroughly. Your code should read like a story.Don’t complain if you write a piece of code and your colleagues don’t talk to you for a few days.Bonus: To start with, you must thoroughly go through this and this.Never ever, ever make the mistake of releasing your app on the Play Store without using ProGuard. ProGuard not only minifies your code, but it obfuscates your code making it harder for reverse-engineers to understand, replicate and manipulate it.Its absolutely free and comes bundled with the Android SDK, and there is absolutely no reason for you not to use it.I have seen several developers releasing their app on the market without ProGuard. It should not take more than a few hours for a not-so-skilled hacker to manipulate an the app released without Proguard.Pro Tip: But if you want top-notch security, then ProGuard is like a cardboard while you need a safe, and here it is, DexGuard.You will forever thank yourself for choosing a proper architecture in the first place.You can use MVP (Model-View-Presenter) architecture which can decouple your code into different easy-to-manage layers thereby improving code flexibility and greatly reducing maintenance time.There is a great demo project for you to start. And if you are having a hard time grasping it, here is a detailed guide for the beginners.Bonus: Do give a check at this, this and most importantly this. All of these can greatly help you in implementing MVP in your project.If you work for any organization playing the role of “just” an Android developer, you probably won’t need to be too concerned about this, as there are UI/UX designers to take care of this.But if you are an individual developer, you need to get this straight into your head. I have seen developers creating really good apps with great functionality, but the UI looks horrible and the UX makes it a pain to use.Design a clean, simple and beautiful interface that is easy on the eyes. You should not just think like a developer, rather you should concentrate on igniting the hidden designer inside you.Try to create a lasting impression on your users by designing a beautiful UI, so that they keep coming back to your app more often than others and tend to convert more (buy your premium version, maybe).Bonus: You can always get design inspiration from popular designers of Dribble or MaterialUp. And there is this book you probably would love to read if you are interested in design.If you want to create a truly amazing app, you need to heavily rely on analytics tools to analyze the performance and usage of different parts of your app.By analytics, I refer to both crash reporting and app usage tracking and you need both of them.Whatever you do, you can never make something perfect. When real users will start using your app on a variety of Android devices and on various Android versions available, you will even see some of your best written code to fall flat on the ground.Crash reporting tools can help you to track and fix them, one crash at a time.You also need to start thinking like a marketer and analyze the usage of various portions of your app. This is what will help you bridge the gap between what you made and what your users’ actually want.Pro Tip: Use Firebase Crash Reporting and Analytics tools and you can thank me later.If you are an individual developer, you have to think beyond being “just a developer” and have to understand marketing as well.If you are serious about your work and want it to reach a large audience, you need to invest your time and money in properly marketing your app. But before starting your marketing campaigns, ensure that your app is absolutely stable with all features ready. You want maximum conversions from every dime you spend, right?Spend time researching who your competitors are and how you can beat them. Identify the ones you can compete immediately and the ones you have to keep aside for a future fight.Pro Tip: Here is an affordable market analysis tool, I love to use.This is something that most of us generally don’t do, but you should and you need to.There is a big difference between writing code and writing “optimized” code. Write code that runs quickly, takes less memory and consumes less device storage.An unoptimized app works well under normal circumstances, but when put to different stressful situations, it can show you its true colors.Check the amount of memory used by your app and look for memory leaks. Remember, a tiny leak can sink a big ship. Spend time on understanding how the Garbage Collector works in Java, create heap dumps and analyze your live objects.Pro Tip: Use Leak Canary to detect your memory leaks. It can save you a lot of time by automating this task for you.It’s very very likely that you are using Android Studio to develop Android apps and using Gradle as your build system. Gradle is great but its slow and it becomes slower than a snail when your project size starts to grow in size.I remember the countless hours I have wasted just sitting and waiting for the Gradle builds to finish. On heavy work days, I easily wasted around an hour on just Gradle builds and that’s like 5 hours a week draining down the gutter.But, there are ways to speed it up too.You can follow this and this post to significantly improve your build speeds. My build time dropped from 4 minutes to less than 30 seconds after proper optimization.There is nothing more important than testing. This is something that should be at the top of your list.Test your app as thoroughly as possible. Spend time for writing automated test cases. Create various stressful situations for your app and see if it can survive.I had once made the mistake of releasing my app out of hurry and didn’t spend proper time testing it. I was waiting for my users to face bugs, report it and then I would go and fix them.Never, ever, ever do that. You might save a day, or two, or a week by cutting down time from testing, but will probably have to spend more than twice later.Fragmentation is one of the biggest problems in Android and Google seems reluctant to fix it, but you have to live with it.There are a huge variety of Android devices with different screen sizes and hardware specifications from a plethora of different device manufactures who customize the OS to their heart’s content.Added to that are the various Android versions where Google adds/removes API functionality out of nowhere to increase your workload ever further (an example here).For example, not a single Android developer has finished an app without using SharedPreferences API. It’s so common, yet it was broken in Samsung Galaxy S with Android 2.2 (bug report here).Spend more time creating different layouts for different screen sizes. Test on different devices, having different versions, different specifications and from different OEMs.If you are still not using Git, go ahead and start using it right away.When I started Android development, I was unfortunate enough not to know what the fudge Git was. I used to copy my entire project everyday and keep one backup in my hard drive and another in the cloud. Seems foolish? Yes, it absolutely was.Git can dramatically improve your workflow. If someone asks me to name a tool that I use everyday and can’t stop using? It’s Git and Git every time.And probably after using it for a few days you would fall in love with it and want to know how Git works internally, so here it is ready for you.And after some time, you would be starting a big project yourself and get confused on how you should maintain a proper branching model, so here you go.Bonus: If you are just starting out and can’t afford to pay the monthly subscription fee for maintaining private repositories in GitHub, you can try BitBucket which lets you do just that for free.The open-source nature of Android is what makes it vulnerable to attacks. Every Android app can be decompiled, reverse-engineered, ripped open, analyzed and manipulated with ease.You don’t want that to happen to your app, right?You should know how to securely store API keys locally in your app. If you are dealing with sensitive data of the users, then you must know how to encrypt them, what algorithm to choose (secure yet fast).You should also store the encryption keys securely either in the server or locally (if needed). You should prevent your app data from being backed up using the ADB (Android Debug Bridge). If you are storing sensitive data in the database, consider obfuscating it.If your app has a premium version which gets cracked and gets released for free. You would incur a serious loss in business, right?There are several things you can do to prevent your app from getting tampered. There is nothing like 100% security. Any skilled and determined hacker with the right resources, tools and patience can crack your app.All you want to do is make it difficult, rather very difficult for the hacker to crack it.Bonus: Reading this and this should be a good start towards securing your app.Everyone loves to use a high-end Android smartphone, so do I. But remember to keep it for your personal use only and never use it for development purposes.A high-end device will hide a lot of flaws while developing your app. Suppose you are doing something in the UI thread which makes its way for a laggy UI, but on a powerful device, you may never ever notice that.An old, low-end device, dumped with lots of apps makes it ideal for a development device.This is an investment that will pay you forever.While developing big and complex apps, you will face some common problems which have probably been solved before by someone more competent than you, that’s when design patterns comes into play.Start spending some time right from today to learn the Java Design Patterns. Here is a Github project that demonstrates all the design patterns known to mankind.To start off, learn the most important ones like Singleton, Adapter, Factory Method, Iterator, Dependency Injection, Event Driven Architecture, Builder, Callback, Strategy, Facade and Producer Consumer.Seems like a lot? It actually isn’t. You will start loving them once you dive in.Pro Tip: Read books like GoF’s Design Patterns, Refactoring by Martin Fowler and Effective Java by Joshua Bloch.We all have got a lot of help from people around us and from the Internet. Lets admit it.Whenever you have a problem, the first thing you would do is Google that and find the first link from StackOverflow. Sometimes you are in a hurry and you end up copying and pasting the solution from the answer having the highest votes.Ever thought the number of libraries you are using from Github for free and how they have greatly reduced your development time and efforts. Its because someone somewhere has taken the time to build it and contribute to make the community better.Remember the day, when you were stuck in understanding a difficult concept or something which is entirely new to you, and you end up finding an awesome blog post which made it super easy for you. Its because somebody skipped a movie date and wrote that article.Its your time to give back as well. The more you give, the more you get back in return.We all are busy in our own work and we find it too difficult to manage time and do something for others. But try to find some time every week to contribute and make this Android community richer.I have tried to share some of the lessons that I have learned in this short journey with Android development. I will continue my journey, learn more and share even more. I hope it helps someone and makes their life a bit easier.If you like this article, do give it a thumbs up, comment on it and share with with your friends.Android ได้นำความสามารถของ Java 8 บางส่วนมาใช้งาน ซึ่งทำให้เราเขียนโค้ดได้ดีและคลีนยิ่งขึ้นAndroid ไม่ได้รองรับทุกความสามารถของ Java 8 แต่รองรับแค่บางส่วนเท่านั้น และเมื่อเราทำการพัฒนาเราต้องทำการตั้ง targetSdkVersion ไว้ที่ Android 7.0 (API Level 24) ขึ้นไปReflection and language-related APIs:Utility APIs:การที่เราจะใช้งานความสามารถของ Java8 นั้น เราจะต้องทำการ Enabled ซะก่อน ซึ่งพระเอกของงานที่จะเป็นตัวปลุกพลังให้แอพเรานั้นชื่อว่า “Jack” โดยทำการเพิ่มคำสั่งนี้ในไฟล์ build.gradle (module-level)Instant Run ตอนนี้ยังไม่รองรับ Jack นะครับ หากเราเปิดใช้งาน Jack ความสามารถของ Instant Run จะไม่ทำงานตอนนี้เรารู้วิธีเปิดใช้งานความสามารถของ Java 8 และข้อจำกัดของมันแล้วเราก็มาลองใช้งานแต่ละความสามารถที่เด่นๆของมันกันเถอะอย่างที่เรารู้ๆกันคือ interface นั้นจะมีแต่ ​Method Signature เท่านั้น จะไม่มี implement การทำงานอะไรภายในเวลาที่ Class ใดๆก็ตามมีการ implement interface นั้นๆไปใช้งานจะต้องทำการ override Method ภายใน interface ให้ครบทุกตัวหากเราจะทำการเพิ่ม Method said() ใน Interface (IHuman) Class ที่ทำการ implements IHuman นั้นจะต้องทำการ override Method ใหม่ถ้าเรามี Class ที่ override IHuman หลายๆClass เราต้องมาไล่ update override ให้ครบทุก Class แลดูเสียเวลาเนอะ ใน Java 8 เลยได้ทำการเพิ่มความสามารถที่จะช่วยแก้ปัญหาจุดนี้นั้นคือ Default interface methods และไม่ใช่แค่แก้ปัญหาในการต้องไล่ update override ให้ครบทุก Class แต่ยังสามารถ implement การทำงานเข้าไปใน Method ของ interface ได้โดยตรงเลยด้วยทำการสั่ง print “Hello” ใน interface เจ๋งป่ะละ และ Class ที่ implement interface ไปใช้นั้นไม่ต้อง override Default methods ใหม่ด้วยเรียกใช้งานได้เหมือน Method ที่ override จาก Interface เลยDefault and static interface methods นั้นรองรับเฉพาะ API Level 24 ขึ้นไปเท่านั้นLambda expressions นั้นเป็นอีกหนึ่งความสามารถที่หลายๆภาษาเริ่มนำเข้ามาใช้ ด้วยลักษณะการใช้งานที่กระชับทำให้โค้ดดูคลีนและอ่านง่าย ทำให้ได้รับความนิยมอย่างมากผมจะยกตัวอย่างการใช้งาน Lambda expressions ที่เห็นเด่นชัดใน Android นั้นก็คือ OnClick()จากเดิมเราจะต้องทำการ new OnClickListener ให้กับ setOnClickListener และยังต้อง override Method เข้ามาอีกแต่หากเราใช้ความสามารถของ Lambda expressionsโค้ดของเราจะดูคลีนดูสะอาดตาขึ้นมาทันที และ หากเราเขียนโค้ดแบบเต็ม Android Studio ยังทำการ Suggest ให้เราใช้ Lambda expressions อีกด้วยแต่หากอยากใช้ Lambda expressions แต่ไม่พร้อมจะใช้ Jack เนื่องด้วยข้อจำกัดหลายๆอย่างนั้น เราก็มีตัวช่วยมานำเสนอ หนึ่งในนั้นก็คือ Retrolambdaวิธีการติดตั้งนั้นใช้วิธีเพิ่มคำสั่งผ่าน Gradle สามารถทำตามได้จาก Retrolambda-GitHubมันคือการที่เราใช้ Annotations ซ้ำๆได้หลายครั้ง โดยปกติการสั่งใช้งาน Annotations ซ้ำกัน Compiler จะแจ้ง Error Duplicate annotationsแต่หากเราจะใช้ความสามารถของ Repeating Annotations นั้น จะต้องทำการใช้ @Repeatable Interface ที่เราต้องการให้สามารถใช้ได้ซ้ำๆหลายครั้งจากโค้ดข้างบนเราทำการ set Color name ผ่าน Annotation Colorให้กับ Shirt สามค่าด้วยกันโดยที่ Compiler ไม่แจ้ง Errorจากนั้นเราจะลองทดสอบดูว่า Shirt มี Color name ทั้งสามค่าจริงไหมได้ผลออกมาตรงกับที่เรา set ค่าผ่าน Repeating Annotations เป๊ะเป็น feature ที่เกี่ยวข้องกันกับ Lambda Expression มันช่วยให้เราเรียกใช้งาน constructors หรือ methods แบบรูปย่อได้ประเภทของ Method References และการใช้งานแต่ละประเภทสามารถดูตัวอย่างได้จากโค้ดด้านล่างเลยจ้า คลีนขึ้นเยอะ :)glhf , ez , :)blog อีกช่องทางหนึ่งของผู้เขียน : http://wanttobeanandroiddev.blogspot.com"
  },
  {
    "link": "https://blog.aritraroy.in/why-you-should-start-using-kotlin-to-supercharge-your-android-development-in-2017-61db1f11d666?source=---------3-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*wYkItLZ-V1XcOET4t2fUBQ.jpeg",
    "author": "Aritra Roy",
    "date": "Mar 7",
    "photo": "https://cdn-images-1.medium.com/max/800/1*madcyMHRPguLXU3VoJt4CQ.gif",
    "head": "Why You Should Start Using Kotlin to Supercharge Your Android Development in 2017",
    "contents": "I still remember the day a few years back when I started Android development and stepped into the vast world of unknown with almost no idea where to start and what to do next.Searching on Google, stumbling miscellaneous articles and checking out StackOverflow answers were the only ways for me to gather knowledge on Android. Back then, I had a hard time finding good quality tutorials to learn from but with time I started knowing places where I could find useful resources to gather knowledge and improve my skills.In this article, I have collected a lot of resources that can prove to be highly useful for almost all Android developers, even if you are a beginner or a seasoned developer. This is an attempt to reduce your pain and help you get access to the right resources to master Android development.These are some of the resources that can prove to be invaluable to any Java programmer starting their Android development journey.An easy and beginner-friendly course developed by Google to learn the basics and fundamental concepts of Android development quickly.Simple, easy and a complete guide for all beginner-level Android developers willing to develop their first Android app.It is one of the best yet underrated resource that almost all Android developers should know right from the beginning of their development journey.If you are just stepping into the vast world of Android development, then it is quite obvious that you will get overwhelmed with a lot of new concepts and terms everywhere. Don’t worry, Google has designed an interactive and easy-to-use glossary with code examples to make your life a lot easier.The official training guide for Android developers from Google which can prove to be extremely useful for any beginner developer. The training covers all the basic stuff with a lot of code examples you need.A very insightful and resourceful article for all newbie developers starting out their Android development journey. Always learn from others experiences, mistakes and never repeat them yourself.Not familiar with XML? Then it is the perfect time for you to learn it as you will need to use it heavily to design your layouts in Android. It is very easy and should not take you much time to grasp.If you are going to communicate with the internet services and make API calls from your Android app, then it is very important for you to have a good understanding of HTTP and REST.If you have been doing Android development for a year or two, then here are some amazing resources which will help you to increase your knowledge and skills on various aspects of Android development further.A well-designed course by Google which is perfect for any intermediate level Android developer to boost up their development skills further.If you have been doing Android development for some time and is struggling to find elegant ways to solve critical software development problems, then these are some of the most common design patterns that can help you a lot.Android has a very rich community of open-source apps, but how do you know which are the best ones for you to learn and improve your development skills from. Don’t worry, this article has got you fully covered.Learn about the best approach to architect your complex Android app for better development, testing, debugging and maintenance.We all know how complex and frustrating Android’s Activity and Fragment lifecycle can sometimes get, but there are other “more modern” ways of creating apps as well and this article can give you a clear idea about it.Jump into the world of reactive programming on Android with this easy and useful tutorial to get you quickly on board.Get an in-depth insight into the Android View constructors, how they work and how you can make the most use of them while developing your own custom views.If you want to understand how the asynchronous world of Android framework is built and leverage it to make smooth, fast and high-quality applications, this is exactly what you need to look at.An in-depth tutorial on understanding how Views and ViewGroups work in Android and how you can create your own custom UI components with perfection.Not many developers properly understand how the different launch modes in Android work and how you can make use of these to create the perfect navigation in your app.You have been using libraries in your Android apps for quite a while now and want to contribute to the community as well, here is a complete and in-depth guide for publishing your own library.Learn how you can make a smooth and successful launch of your Android app in Play Store that you have been developing for months.This Github repository can prove to be a gem for all those who want to learn about the different architectural tools and patterns to develop Android apps like a pro.If you are confused between developing web-apps and native apps and want to deliver easily discoverable and fast-loading apps, then this is something you cannot afford to miss.If you are developing Android apps for quite some time now and want to improve your productivity and development workflow then these are the tools that you surely need to check out.You have been using Android Studio almost every day to develop your apps but have probably never realized how powerful it actually is and there is so much you can do to make the most out of it.Following the best practices helps you to develop cleaner and better apps and it is even more important if you are developing with a team where it is very important for you to maintain a consistent development style for everyone to be on the same page.An easy and resourceful article explaining several aspects of Android development best practices.This article is all about the best practices of using the strings.xml resource file properly and making the most out of it.One of the best and the most complete resource about the best practices and guidelines of various aspects of Android development covering almost everything you need to know.Want to use Android in your company, then this article can help you learn the techniques of making the best use of Android for Work in your enterprise.A quick and extremely useful list of some of the best practices of Android development to ensure that you are always delivering high-quality Android apps.Effective Java (by Joshua Block) is considered to be one of the best books for writing high-quality maintainable Java code. This post focuses on how you can make the best use of those techniques and principles specifically in Android development.If you have chosen the reactive way of building Android apps, then these tips can surely help you avoid some common mistakes and get the best out of it.An in-depth article about some of the common techniques of storing secrets (password, API keys and other sensitive information) in Android apps and their pros and cons.An app is always incomplete without a good user interface. A clean and beautiful UI is what makes your app appealing, gives it the wowing factor and makes it stand out from the rest.A very well-written article giving you an in-depth insight into the world of Material Design for Android.Learn how you can create beautiful and meaningful animations in your Android app to wow your users and make it stand out from the rest.The freshly-baked ConstraintLayout completely changes the game when it comes to designing layouts for your Android apps. This article can help you understand the basics of ConstraintLayout and give it a quick start.Design better and more high-quality apps by not making these common mistakes while embracing Material Design in your Android app.A very insightful article giving you a more scientific perspective into Material Design and how you can put it to the best use while designing your app.Some interesting bonus resources you will never want to miss.If you want to keep yourself updated with the latest development happenings in the Android world, make sure to follow some of the expert Android developers on Twitter.Want to dive into the world of IoT using Android tools and its framework? Here is a good resource for you to start your journey.If you are interested and excited about developing apps for Android wearables, then here is a complete tutorial to get you started.A very interesting article about the nitty-gritty details of the Android resources and attributes you probably didn’t knew.Want to develop apps for the big screen TVs or make your already working apps to support this new platform? Here is quick and good introduction for you to get started.Want to stay updated with the latest development news, tutorials, and happenings in the Android world? Here are some of the best places for you to check out.Never miss out on the latest and greatest development news, articles, screencasts and other happenings of the Android world. Android Weekly offers free newsletters every week for you to stay updated with no effort.If you love listening to podcasts, then you will surely not want to miss the bi-weekly episodes discussing about various tools, patterns and best practices to become a better Android developer.One of the best and most up-to-date crowdsourced resource for Android developers where you will find guides and tutorials about almost everything in Android. And the best thing is that it is completely open-source for you to contribute to it as well.Get high-quality bite sized Android development screencasts on a wide-variety of development topics released every week.This is the place where you will find all essential information that you will need for designing the UI and UX of your app, hence the name “styling android”.Mark Murphy, popularly known for authoring the famous book, “Busy Coder’s Guide to Android Development” writes about some interesting stuff about Android development on his personal blog.This site covers well-written, in-depth tutorials on a lot of topics in Android development that can be invaluable for both beginners and intermediate-level Android developers.A very active community of Android developers from all over the world discussing and sharing information on various Android development related topics.This is the official blog through which Google communicates directly with the Android developers. All the latest development related news and announcements appear here first before anywhere else.I hope these resources will help you learn more about Android development and build better apps. If you found this useful, do share it with your friends and co-developers as well. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users.I still remember that day back in 2014 when I decided to start Android development, and that was one of the best decisions I took in my life. It has been around two and a half years now and I had the chance to learn and un-learn a lot of things in Android.Initially when I started, I didn’t have a mentor or someone who could guide me to do things the right way. I did a LOT of mistakes and also wasted a lot of time doing and later rectifying them.Later, after one and a half years, I got the chance to work with some really talented and experienced Android developers, who guided me and helped me shape things in a much better way. Both of these phases helped me learn a hell lot of things in the HARD way. I learned what TO DO and most importantly what NOT TO DO.It has been quite some time that I have been trying to help other developers in ways possible to me, directly and indirectly. Here are my StackOverflow and Github profiles.In this article, I will be sharing some of the gems that I have collected in these years. It might help someone to get started faster and not repeat the mistakes that I once did.Disclaimer: I will mainly be focussing on Android and some concepts of programming and product development in this article, so if you are not familiar with any of these, you might not want to read any further. Others, just dive in. :-)Initially, I had a bad idea of not using open-source libraries. Whatever I needed, I just wanted to make it myself. It’s was seriously a terrible idea.If you have a problem while developing your app, and if that problem has been solved by someone else before and in a good way, why not use that? You can save yourself a lot of time.Focus more on the core business logic of your app. If you want to make network calls in your app, you don’t need to make a Retrofit yourself.Bonus: Android Arsenal maintains a database of almost all Android libraries ever made. Go check it out.There are lots and lots of open-source libraries available in Github for you to use for FREE. But don’t get too excited and start using libraries blindly.Check the number of stars that particular library has, the more the better. Check if the author of that library have also created some other popular libraries as well. Check the issues (both open and closed), which can give you a better idea of how robust and stable the library is in production.If you can afford the time, you should dive into the code of that library and check yourself if its really worth it.You just want to ensure that the code you are going to use is reliable, bug-free and high-quality.Pro Tip: Try out any library hosted directly from the command line using Dryrun.We spent most of our time reading others code than writing ourselves. If you are not doing that, START today.Whatever code you are able to write today is only because you have read and learned something, somewhere, someday. It’s just a reflection of what you already know. You can only grow and improve yourself by reading and learning from other’s work.The great thing about Android is that it is a completely open-source platform. Dive into the code and check how they have implemented the framework. There are thousands of open-source libraries in Github. Just pick a library and see how the developer have implemented it.Bonus: Here is a curated list of some of the best libraries and here is a list of almost all open-source Android apps available. You are welcome :-)If you compare coding with writing, then coding standards is like your handwriting.As you would be reading more of others code, other people will also be reading a lot of your code and you don’t want to scare the shit out of them, do you? And if you are working in an organization and collaborating with other developers heavily, do take special care about it.Write short, clean and readable code that YOU and people reading your code would enjoy thoroughly. Your code should read like a story.Don’t complain if you write a piece of code and your colleagues don’t talk to you for a few days.Bonus: To start with, you must thoroughly go through this and this.Never ever, ever make the mistake of releasing your app on the Play Store without using ProGuard. ProGuard not only minifies your code, but it obfuscates your code making it harder for reverse-engineers to understand, replicate and manipulate it.Its absolutely free and comes bundled with the Android SDK, and there is absolutely no reason for you not to use it.I have seen several developers releasing their app on the market without ProGuard. It should not take more than a few hours for a not-so-skilled hacker to manipulate an the app released without Proguard.Pro Tip: But if you want top-notch security, then ProGuard is like a cardboard while you need a safe, and here it is, DexGuard.You will forever thank yourself for choosing a proper architecture in the first place.You can use MVP (Model-View-Presenter) architecture which can decouple your code into different easy-to-manage layers thereby improving code flexibility and greatly reducing maintenance time.There is a great demo project for you to start. And if you are having a hard time grasping it, here is a detailed guide for the beginners.Bonus: Do give a check at this, this and most importantly this. All of these can greatly help you in implementing MVP in your project.If you work for any organization playing the role of “just” an Android developer, you probably won’t need to be too concerned about this, as there are UI/UX designers to take care of this.But if you are an individual developer, you need to get this straight into your head. I have seen developers creating really good apps with great functionality, but the UI looks horrible and the UX makes it a pain to use.Design a clean, simple and beautiful interface that is easy on the eyes. You should not just think like a developer, rather you should concentrate on igniting the hidden designer inside you.Try to create a lasting impression on your users by designing a beautiful UI, so that they keep coming back to your app more often than others and tend to convert more (buy your premium version, maybe).Bonus: You can always get design inspiration from popular designers of Dribble or MaterialUp. And there is this book you probably would love to read if you are interested in design.If you want to create a truly amazing app, you need to heavily rely on analytics tools to analyze the performance and usage of different parts of your app.By analytics, I refer to both crash reporting and app usage tracking and you need both of them.Whatever you do, you can never make something perfect. When real users will start using your app on a variety of Android devices and on various Android versions available, you will even see some of your best written code to fall flat on the ground.Crash reporting tools can help you to track and fix them, one crash at a time.You also need to start thinking like a marketer and analyze the usage of various portions of your app. This is what will help you bridge the gap between what you made and what your users’ actually want.Pro Tip: Use Firebase Crash Reporting and Analytics tools and you can thank me later.If you are an individual developer, you have to think beyond being “just a developer” and have to understand marketing as well.If you are serious about your work and want it to reach a large audience, you need to invest your time and money in properly marketing your app. But before starting your marketing campaigns, ensure that your app is absolutely stable with all features ready. You want maximum conversions from every dime you spend, right?Spend time researching who your competitors are and how you can beat them. Identify the ones you can compete immediately and the ones you have to keep aside for a future fight.Pro Tip: Here is an affordable market analysis tool, I love to use.This is something that most of us generally don’t do, but you should and you need to.There is a big difference between writing code and writing “optimized” code. Write code that runs quickly, takes less memory and consumes less device storage.An unoptimized app works well under normal circumstances, but when put to different stressful situations, it can show you its true colors.Check the amount of memory used by your app and look for memory leaks. Remember, a tiny leak can sink a big ship. Spend time on understanding how the Garbage Collector works in Java, create heap dumps and analyze your live objects.Pro Tip: Use Leak Canary to detect your memory leaks. It can save you a lot of time by automating this task for you.It’s very very likely that you are using Android Studio to develop Android apps and using Gradle as your build system. Gradle is great but its slow and it becomes slower than a snail when your project size starts to grow in size.I remember the countless hours I have wasted just sitting and waiting for the Gradle builds to finish. On heavy work days, I easily wasted around an hour on just Gradle builds and that’s like 5 hours a week draining down the gutter.But, there are ways to speed it up too.You can follow this and this post to significantly improve your build speeds. My build time dropped from 4 minutes to less than 30 seconds after proper optimization.There is nothing more important than testing. This is something that should be at the top of your list.Test your app as thoroughly as possible. Spend time for writing automated test cases. Create various stressful situations for your app and see if it can survive.I had once made the mistake of releasing my app out of hurry and didn’t spend proper time testing it. I was waiting for my users to face bugs, report it and then I would go and fix them.Never, ever, ever do that. You might save a day, or two, or a week by cutting down time from testing, but will probably have to spend more than twice later.Fragmentation is one of the biggest problems in Android and Google seems reluctant to fix it, but you have to live with it.There are a huge variety of Android devices with different screen sizes and hardware specifications from a plethora of different device manufactures who customize the OS to their heart’s content.Added to that are the various Android versions where Google adds/removes API functionality out of nowhere to increase your workload ever further (an example here).For example, not a single Android developer has finished an app without using SharedPreferences API. It’s so common, yet it was broken in Samsung Galaxy S with Android 2.2 (bug report here).Spend more time creating different layouts for different screen sizes. Test on different devices, having different versions, different specifications and from different OEMs.If you are still not using Git, go ahead and start using it right away.When I started Android development, I was unfortunate enough not to know what the fudge Git was. I used to copy my entire project everyday and keep one backup in my hard drive and another in the cloud. Seems foolish? Yes, it absolutely was.Git can dramatically improve your workflow. If someone asks me to name a tool that I use everyday and can’t stop using? It’s Git and Git every time.And probably after using it for a few days you would fall in love with it and want to know how Git works internally, so here it is ready for you.And after some time, you would be starting a big project yourself and get confused on how you should maintain a proper branching model, so here you go.Bonus: If you are just starting out and can’t afford to pay the monthly subscription fee for maintaining private repositories in GitHub, you can try BitBucket which lets you do just that for free.The open-source nature of Android is what makes it vulnerable to attacks. Every Android app can be decompiled, reverse-engineered, ripped open, analyzed and manipulated with ease.You don’t want that to happen to your app, right?You should know how to securely store API keys locally in your app. If you are dealing with sensitive data of the users, then you must know how to encrypt them, what algorithm to choose (secure yet fast).You should also store the encryption keys securely either in the server or locally (if needed). You should prevent your app data from being backed up using the ADB (Android Debug Bridge). If you are storing sensitive data in the database, consider obfuscating it.If your app has a premium version which gets cracked and gets released for free. You would incur a serious loss in business, right?There are several things you can do to prevent your app from getting tampered. There is nothing like 100% security. Any skilled and determined hacker with the right resources, tools and patience can crack your app.All you want to do is make it difficult, rather very difficult for the hacker to crack it.Bonus: Reading this and this should be a good start towards securing your app.Everyone loves to use a high-end Android smartphone, so do I. But remember to keep it for your personal use only and never use it for development purposes.A high-end device will hide a lot of flaws while developing your app. Suppose you are doing something in the UI thread which makes its way for a laggy UI, but on a powerful device, you may never ever notice that.An old, low-end device, dumped with lots of apps makes it ideal for a development device.This is an investment that will pay you forever.While developing big and complex apps, you will face some common problems which have probably been solved before by someone more competent than you, that’s when design patterns comes into play.Start spending some time right from today to learn the Java Design Patterns. Here is a Github project that demonstrates all the design patterns known to mankind.To start off, learn the most important ones like Singleton, Adapter, Factory Method, Iterator, Dependency Injection, Event Driven Architecture, Builder, Callback, Strategy, Facade and Producer Consumer.Seems like a lot? It actually isn’t. You will start loving them once you dive in.Pro Tip: Read books like GoF’s Design Patterns, Refactoring by Martin Fowler and Effective Java by Joshua Bloch.We all have got a lot of help from people around us and from the Internet. Lets admit it.Whenever you have a problem, the first thing you would do is Google that and find the first link from StackOverflow. Sometimes you are in a hurry and you end up copying and pasting the solution from the answer having the highest votes.Ever thought the number of libraries you are using from Github for free and how they have greatly reduced your development time and efforts. Its because someone somewhere has taken the time to build it and contribute to make the community better.Remember the day, when you were stuck in understanding a difficult concept or something which is entirely new to you, and you end up finding an awesome blog post which made it super easy for you. Its because somebody skipped a movie date and wrote that article.Its your time to give back as well. The more you give, the more you get back in return.We all are busy in our own work and we find it too difficult to manage time and do something for others. But try to find some time every week to contribute and make this Android community richer.I have tried to share some of the lessons that I have learned in this short journey with Android development. I will continue my journey, learn more and share even more. I hope it helps someone and makes their life a bit easier.If you like this article, do give it a thumbs up, comment on it and share with with your friends.Android ได้นำความสามารถของ Java 8 บางส่วนมาใช้งาน ซึ่งทำให้เราเขียนโค้ดได้ดีและคลีนยิ่งขึ้นAndroid ไม่ได้รองรับทุกความสามารถของ Java 8 แต่รองรับแค่บางส่วนเท่านั้น และเมื่อเราทำการพัฒนาเราต้องทำการตั้ง targetSdkVersion ไว้ที่ Android 7.0 (API Level 24) ขึ้นไปReflection and language-related APIs:Utility APIs:การที่เราจะใช้งานความสามารถของ Java8 นั้น เราจะต้องทำการ Enabled ซะก่อน ซึ่งพระเอกของงานที่จะเป็นตัวปลุกพลังให้แอพเรานั้นชื่อว่า “Jack” โดยทำการเพิ่มคำสั่งนี้ในไฟล์ build.gradle (module-level)Instant Run ตอนนี้ยังไม่รองรับ Jack นะครับ หากเราเปิดใช้งาน Jack ความสามารถของ Instant Run จะไม่ทำงานตอนนี้เรารู้วิธีเปิดใช้งานความสามารถของ Java 8 และข้อจำกัดของมันแล้วเราก็มาลองใช้งานแต่ละความสามารถที่เด่นๆของมันกันเถอะอย่างที่เรารู้ๆกันคือ interface นั้นจะมีแต่ ​Method Signature เท่านั้น จะไม่มี implement การทำงานอะไรภายในเวลาที่ Class ใดๆก็ตามมีการ implement interface นั้นๆไปใช้งานจะต้องทำการ override Method ภายใน interface ให้ครบทุกตัวหากเราจะทำการเพิ่ม Method said() ใน Interface (IHuman) Class ที่ทำการ implements IHuman นั้นจะต้องทำการ override Method ใหม่ถ้าเรามี Class ที่ override IHuman หลายๆClass เราต้องมาไล่ update override ให้ครบทุก Class แลดูเสียเวลาเนอะ ใน Java 8 เลยได้ทำการเพิ่มความสามารถที่จะช่วยแก้ปัญหาจุดนี้นั้นคือ Default interface methods และไม่ใช่แค่แก้ปัญหาในการต้องไล่ update override ให้ครบทุก Class แต่ยังสามารถ implement การทำงานเข้าไปใน Method ของ interface ได้โดยตรงเลยด้วยทำการสั่ง print “Hello” ใน interface เจ๋งป่ะละ และ Class ที่ implement interface ไปใช้นั้นไม่ต้อง override Default methods ใหม่ด้วยเรียกใช้งานได้เหมือน Method ที่ override จาก Interface เลยDefault and static interface methods นั้นรองรับเฉพาะ API Level 24 ขึ้นไปเท่านั้นLambda expressions นั้นเป็นอีกหนึ่งความสามารถที่หลายๆภาษาเริ่มนำเข้ามาใช้ ด้วยลักษณะการใช้งานที่กระชับทำให้โค้ดดูคลีนและอ่านง่าย ทำให้ได้รับความนิยมอย่างมากผมจะยกตัวอย่างการใช้งาน Lambda expressions ที่เห็นเด่นชัดใน Android นั้นก็คือ OnClick()จากเดิมเราจะต้องทำการ new OnClickListener ให้กับ setOnClickListener และยังต้อง override Method เข้ามาอีกแต่หากเราใช้ความสามารถของ Lambda expressionsโค้ดของเราจะดูคลีนดูสะอาดตาขึ้นมาทันที และ หากเราเขียนโค้ดแบบเต็ม Android Studio ยังทำการ Suggest ให้เราใช้ Lambda expressions อีกด้วยแต่หากอยากใช้ Lambda expressions แต่ไม่พร้อมจะใช้ Jack เนื่องด้วยข้อจำกัดหลายๆอย่างนั้น เราก็มีตัวช่วยมานำเสนอ หนึ่งในนั้นก็คือ Retrolambdaวิธีการติดตั้งนั้นใช้วิธีเพิ่มคำสั่งผ่าน Gradle สามารถทำตามได้จาก Retrolambda-GitHubมันคือการที่เราใช้ Annotations ซ้ำๆได้หลายครั้ง โดยปกติการสั่งใช้งาน Annotations ซ้ำกัน Compiler จะแจ้ง Error Duplicate annotationsแต่หากเราจะใช้ความสามารถของ Repeating Annotations นั้น จะต้องทำการใช้ @Repeatable Interface ที่เราต้องการให้สามารถใช้ได้ซ้ำๆหลายครั้งจากโค้ดข้างบนเราทำการ set Color name ผ่าน Annotation Colorให้กับ Shirt สามค่าด้วยกันโดยที่ Compiler ไม่แจ้ง Errorจากนั้นเราจะลองทดสอบดูว่า Shirt มี Color name ทั้งสามค่าจริงไหมได้ผลออกมาตรงกับที่เรา set ค่าผ่าน Repeating Annotations เป๊ะเป็น feature ที่เกี่ยวข้องกันกับ Lambda Expression มันช่วยให้เราเรียกใช้งาน constructors หรือ methods แบบรูปย่อได้ประเภทของ Method References และการใช้งานแต่ละประเภทสามารถดูตัวอย่างได้จากโค้ดด้านล่างเลยจ้า คลีนขึ้นเยอะ :)glhf , ez , :)blog อีกช่องทางหนึ่งของผู้เขียน : http://wanttobeanandroiddev.blogspot.comT he most popular and the most widely used language for Android development is undoubtedly Java. But that certainly doesn’t mean it is the best choice for the developers out there today. The biggest problem with Java is that it is old, verbose, error-prone and not a “modern language” in any way.They are trying to bridge the gap with Java 8, bringing some modern flavors to the language but Android certainly doesn’t use all the features of Java 8 and we are still stuck in the old Java 7 and 6-ish world which is probably not going to improve much in the foreseeable future.But the good thing is that we have Kotlin to the rescue and in this article, we will be learning why it’s the right time to start using the more modern, sophisticated and pragmatic language for Android development.I know you have been using Java for years (maybe even decades) and you are extremely familiar with it. You know the language from corner-to-corner and also several undocumented things which can only come up with years of experience.And now when a new language comes in town and someone tells you to switch to it, you are quite skeptical about it and believe me, I was too. I have been using Java for quite a long time now and have formed a love-hate relationship with it.I was not at all convinced to switch from Java initially but when I started looking into the bigger picture with an open mind, things really took the turn.Java was really one of the best languages back then but things do change with time. And things are even worse in Android where we don’t have support for lambdas, method references, streams, try-with-resources (minSdk ≥ 19), javax.time APIs in the old Java 7 or 6 world.But there are some third-party ways of backporting some of these features like RetroLambda, Streams backport, ThreeTenABP, but that’s always a hassle, isn’t it?Android Nougat also made a bold attempt of bringing some of the Java 8 features using the Jack compiler but most of them are only usable if you target minSdkVersion of 24, which you really shouldn’t considering how slow Android users are in getting updates.Check out the platform version distribution chart here.One of the biggest flaws in Java is the way it handles “null” leading to the dreaded NulPointerException (popularly known as The Billion Dollar Mistake).One of the most common reasons for crashes in Android apps today is the NullPointerException. It’s really a big deal in the industry today. It is almost impossible to have an app in production without a single NullPointerException (if you do, please tell me about it, I would be interested to hear ;-)).And Nullability is an even bigger problem in Android. Null is a very efficient and simple way of representing the absence of a value and Android uses it everywhere in its framework and its APIs making it even more difficult for us to handle them.Another problem we often ignore is the way Java implements non-static Inner classes and Anonymous Inner classes which always keeps an implicit reference to the outer class thereby making your app susceptible to memory leaks.There are several other language design flaws making it a really painful experience for developers sometimes.We developers always love clean and concise code. Less code takes less time to write and is less susceptible to bugs. But with Java, you always have to write a lot of code to get even the “simplest” thing done. You should have already noticed this, didn’t you?There is a lot of “ceremony” involved in Java APIs and Android makes it even worse by burdening the developers to do a lot of things in a particular order to get most things done, like accessing the database, fragment transactions and so many more.Fixing all of these can certainly improve the experience and productivity of the developers considerably.The good thing is that we have Kotlin, a statically-typed JVM based language developed by JetBrains. It has been developed completely as an open-source project giving special importance to Android development.Kotlin comes from the good folks at JetBrains, the guys behind the best IDEs like IntelliJ and our beloved Android Studio. They understand the pain we developers face in our day-to-day development workflow and are trying to address the real use cases in this language.Not only that, they are also using Kotlin in production to develop their own products as well so it is highly unlikely that this project will get abandoned anytime soon.Whereas the other JVM based languages tend to completely forget that Java (and the plethora of Java libraries) even exists and wants to re-implement everything, Kotlin takes the complete opposite path where it acknowledges the fact that Java is a “big thing” and improves over its limitations.This is the first thing I loved when I heard about Kotlin. You can call Java code from Kotlin and vice-versa seamlessly. Both Kotlin and Java generate the same bytecode and you have nothing to worry that you are shipping something completely different with Kotlin.You can start using Kotlin in your existing project with all your old Java code straight away. Start by writing some simple and small parts of your app in Kotlin as you slowly start getting familiar with the language, its constructs and its syntax (which is btw, super simple :-)).You don’t need to convert your entire project to Kotlin right from the beginning. Like, I have started using Kotlin in a significantly large project where I have started writing some minimal UI components and simple business logic in Kotlin at first. Currently, only 4–5% of the entire codebase is in Kotlin and the rest is still the legacy Java code I have been writing for months (which I will convert eventually).But the mix and match of Java and Kotlin is working really well in my project. The interoperability is truly a blessing in disguise.I have been developing Android apps for around 3 years now and one of the most common reasons for crashes in our apps have been the NullPointerExceptions.We have spent a lot of time and resources fixing a plethora of NPEs in several of ours apps. Guarding your code with null checks everywhere becomes seriously a very time-consuming and boring task which could have been spent in a more productive way otherwise.And the great thing about Kotlin is that null-safety is a part of the type system itself. It is so much better to catch nulls during the compile time than crashing your app at runtime.For example, in Kotlin, all variables default to non-null and if you want a nullable variable you mark it with a “?”. Suppose you have a String variable and you are trying to assign a value to it, everything works just fine,Now, if you try to do this,The compiler fails to compile and gives you this message, “Null can not be a value of a non-null type String”. This happens because all variables default to non-null and you have to explicitly tell the compiler that you want a nullable variable.And now it compiles fine but you have to be careful while accessing this variable. With this type system in place, it is very difficult for NPEs to occur in your app at runtime as they will be caught and addressed at compile-time itself.You have very little to worry about in this department when you know that Kotlin is a JetBrains product, the ones who specialize in creating some of the best and most used IDEs in the world.There is a plugin that you can install in Android Studio to get Kotlin working in your project. Yes, it’s that simple. They have an Eclipse plugin if you are still using Eclipse (seriously, are you?).All IDE features work perfectly in Kotlin. You can mix and match Kotlin and Java code in the same project and everything still works great. The IDE support is really great with Kotlin where other JVM based languages don’t even come close.Another amazing feature that the Kotlin plugin brings to Android Studio is “Convert Java File to Kotlin Feature” and I loved it so much when I saw it for the first time. All you need to do is give it your old Java file and in one-click, it can convert it to its equivalent Kotlin file.I have converted several Java files to Kotlin using this feature and have found it working really well 99% of the time. Read more about it here.Now with Kotlin you write significantly less amount of code than you have ever written with Java. Kotlin files are significantly smaller and more concise than their Java equivalents.Writing less code, takes less time and is less prone to bugs or human errors. The Java files consistently shrink even when you convert them to Kotlin using the plugin in Android Studio. I have converted several Java files of various sizes into Kotlin in my project and I am yet to find a case where this is not true.The Kotlin syntax is not verbose like that of Java. It is very crisp, concise and reduces a lot of boilerplate code that we developers have to write every day.For instance, just take a look at this. We all use click listeners in our Android apps,Just to perform an action on the click of a button, there is so much code and ceremony involved. Now just have a look at the Kotlin equivalent,See for yourself how simple and tight the syntax is. Just have a quick look at the Kotlin language reference and you will surely love the conciseness and simplicity of it even more.Kotlin is suddenly not the new kid in town. It has been there for a few years now but JetBrains kept it closed to themselves until now. Kotlin has been developed to solve the everyday real-world problems that we developers have to deal with.Kotlin, unlike some other JVM-based languages doesn’t come from an academic or research standpoint. A programming language is simply a “tool” that we developers use to build applications and the idea is to take real use cases in mind and improve this “tool” further.It is always tempting to rebuild or re-implement everything from scratch and JetBrains could have done that with Kotlin but they didn’t. The goal is not that, but the goal is to build a “truly useful programming language” that will make our lives easier.By now you should be quite convinced as why Kotlin is the kind of language you had always wished for and you finally have it. Kotlin makes Android development a lot more fun again. It’s like giving a new toy to a kid who was bored for a long time the same old one and when the new toy is so much better than the old one.So what are you waiting for? Go ahead, open Android Studio, download the Kotlin plugin and get started right away. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users."
  },
  {
    "link": "https://medium.com/@mateusz_bartos/write-ios-apps-in-java-along-with-android-900d6013f83f?source=---------4-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*ZK4ikJWMaKb9Wba56AWE2Q.jpeg",
    "author": "",
    "date": "Mar 16",
    "photo": "https://cdn-images-1.medium.com/max/800/1*znsxO76LG5Hegl_txyZ8EA.png",
    "head": "Write iOS apps in Java along with Android",
    "contents": "I still remember the day a few years back when I started Android development and stepped into the vast world of unknown with almost no idea where to start and what to do next.Searching on Google, stumbling miscellaneous articles and checking out StackOverflow answers were the only ways for me to gather knowledge on Android. Back then, I had a hard time finding good quality tutorials to learn from but with time I started knowing places where I could find useful resources to gather knowledge and improve my skills.In this article, I have collected a lot of resources that can prove to be highly useful for almost all Android developers, even if you are a beginner or a seasoned developer. This is an attempt to reduce your pain and help you get access to the right resources to master Android development.These are some of the resources that can prove to be invaluable to any Java programmer starting their Android development journey.An easy and beginner-friendly course developed by Google to learn the basics and fundamental concepts of Android development quickly.Simple, easy and a complete guide for all beginner-level Android developers willing to develop their first Android app.It is one of the best yet underrated resource that almost all Android developers should know right from the beginning of their development journey.If you are just stepping into the vast world of Android development, then it is quite obvious that you will get overwhelmed with a lot of new concepts and terms everywhere. Don’t worry, Google has designed an interactive and easy-to-use glossary with code examples to make your life a lot easier.The official training guide for Android developers from Google which can prove to be extremely useful for any beginner developer. The training covers all the basic stuff with a lot of code examples you need.A very insightful and resourceful article for all newbie developers starting out their Android development journey. Always learn from others experiences, mistakes and never repeat them yourself.Not familiar with XML? Then it is the perfect time for you to learn it as you will need to use it heavily to design your layouts in Android. It is very easy and should not take you much time to grasp.If you are going to communicate with the internet services and make API calls from your Android app, then it is very important for you to have a good understanding of HTTP and REST.If you have been doing Android development for a year or two, then here are some amazing resources which will help you to increase your knowledge and skills on various aspects of Android development further.A well-designed course by Google which is perfect for any intermediate level Android developer to boost up their development skills further.If you have been doing Android development for some time and is struggling to find elegant ways to solve critical software development problems, then these are some of the most common design patterns that can help you a lot.Android has a very rich community of open-source apps, but how do you know which are the best ones for you to learn and improve your development skills from. Don’t worry, this article has got you fully covered.Learn about the best approach to architect your complex Android app for better development, testing, debugging and maintenance.We all know how complex and frustrating Android’s Activity and Fragment lifecycle can sometimes get, but there are other “more modern” ways of creating apps as well and this article can give you a clear idea about it.Jump into the world of reactive programming on Android with this easy and useful tutorial to get you quickly on board.Get an in-depth insight into the Android View constructors, how they work and how you can make the most use of them while developing your own custom views.If you want to understand how the asynchronous world of Android framework is built and leverage it to make smooth, fast and high-quality applications, this is exactly what you need to look at.An in-depth tutorial on understanding how Views and ViewGroups work in Android and how you can create your own custom UI components with perfection.Not many developers properly understand how the different launch modes in Android work and how you can make use of these to create the perfect navigation in your app.You have been using libraries in your Android apps for quite a while now and want to contribute to the community as well, here is a complete and in-depth guide for publishing your own library.Learn how you can make a smooth and successful launch of your Android app in Play Store that you have been developing for months.This Github repository can prove to be a gem for all those who want to learn about the different architectural tools and patterns to develop Android apps like a pro.If you are confused between developing web-apps and native apps and want to deliver easily discoverable and fast-loading apps, then this is something you cannot afford to miss.If you are developing Android apps for quite some time now and want to improve your productivity and development workflow then these are the tools that you surely need to check out.You have been using Android Studio almost every day to develop your apps but have probably never realized how powerful it actually is and there is so much you can do to make the most out of it.Following the best practices helps you to develop cleaner and better apps and it is even more important if you are developing with a team where it is very important for you to maintain a consistent development style for everyone to be on the same page.An easy and resourceful article explaining several aspects of Android development best practices.This article is all about the best practices of using the strings.xml resource file properly and making the most out of it.One of the best and the most complete resource about the best practices and guidelines of various aspects of Android development covering almost everything you need to know.Want to use Android in your company, then this article can help you learn the techniques of making the best use of Android for Work in your enterprise.A quick and extremely useful list of some of the best practices of Android development to ensure that you are always delivering high-quality Android apps.Effective Java (by Joshua Block) is considered to be one of the best books for writing high-quality maintainable Java code. This post focuses on how you can make the best use of those techniques and principles specifically in Android development.If you have chosen the reactive way of building Android apps, then these tips can surely help you avoid some common mistakes and get the best out of it.An in-depth article about some of the common techniques of storing secrets (password, API keys and other sensitive information) in Android apps and their pros and cons.An app is always incomplete without a good user interface. A clean and beautiful UI is what makes your app appealing, gives it the wowing factor and makes it stand out from the rest.A very well-written article giving you an in-depth insight into the world of Material Design for Android.Learn how you can create beautiful and meaningful animations in your Android app to wow your users and make it stand out from the rest.The freshly-baked ConstraintLayout completely changes the game when it comes to designing layouts for your Android apps. This article can help you understand the basics of ConstraintLayout and give it a quick start.Design better and more high-quality apps by not making these common mistakes while embracing Material Design in your Android app.A very insightful article giving you a more scientific perspective into Material Design and how you can put it to the best use while designing your app.Some interesting bonus resources you will never want to miss.If you want to keep yourself updated with the latest development happenings in the Android world, make sure to follow some of the expert Android developers on Twitter.Want to dive into the world of IoT using Android tools and its framework? Here is a good resource for you to start your journey.If you are interested and excited about developing apps for Android wearables, then here is a complete tutorial to get you started.A very interesting article about the nitty-gritty details of the Android resources and attributes you probably didn’t knew.Want to develop apps for the big screen TVs or make your already working apps to support this new platform? Here is quick and good introduction for you to get started.Want to stay updated with the latest development news, tutorials, and happenings in the Android world? Here are some of the best places for you to check out.Never miss out on the latest and greatest development news, articles, screencasts and other happenings of the Android world. Android Weekly offers free newsletters every week for you to stay updated with no effort.If you love listening to podcasts, then you will surely not want to miss the bi-weekly episodes discussing about various tools, patterns and best practices to become a better Android developer.One of the best and most up-to-date crowdsourced resource for Android developers where you will find guides and tutorials about almost everything in Android. And the best thing is that it is completely open-source for you to contribute to it as well.Get high-quality bite sized Android development screencasts on a wide-variety of development topics released every week.This is the place where you will find all essential information that you will need for designing the UI and UX of your app, hence the name “styling android”.Mark Murphy, popularly known for authoring the famous book, “Busy Coder’s Guide to Android Development” writes about some interesting stuff about Android development on his personal blog.This site covers well-written, in-depth tutorials on a lot of topics in Android development that can be invaluable for both beginners and intermediate-level Android developers.A very active community of Android developers from all over the world discussing and sharing information on various Android development related topics.This is the official blog through which Google communicates directly with the Android developers. All the latest development related news and announcements appear here first before anywhere else.I hope these resources will help you learn more about Android development and build better apps. If you found this useful, do share it with your friends and co-developers as well. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users.I still remember that day back in 2014 when I decided to start Android development, and that was one of the best decisions I took in my life. It has been around two and a half years now and I had the chance to learn and un-learn a lot of things in Android.Initially when I started, I didn’t have a mentor or someone who could guide me to do things the right way. I did a LOT of mistakes and also wasted a lot of time doing and later rectifying them.Later, after one and a half years, I got the chance to work with some really talented and experienced Android developers, who guided me and helped me shape things in a much better way. Both of these phases helped me learn a hell lot of things in the HARD way. I learned what TO DO and most importantly what NOT TO DO.It has been quite some time that I have been trying to help other developers in ways possible to me, directly and indirectly. Here are my StackOverflow and Github profiles.In this article, I will be sharing some of the gems that I have collected in these years. It might help someone to get started faster and not repeat the mistakes that I once did.Disclaimer: I will mainly be focussing on Android and some concepts of programming and product development in this article, so if you are not familiar with any of these, you might not want to read any further. Others, just dive in. :-)Initially, I had a bad idea of not using open-source libraries. Whatever I needed, I just wanted to make it myself. It’s was seriously a terrible idea.If you have a problem while developing your app, and if that problem has been solved by someone else before and in a good way, why not use that? You can save yourself a lot of time.Focus more on the core business logic of your app. If you want to make network calls in your app, you don’t need to make a Retrofit yourself.Bonus: Android Arsenal maintains a database of almost all Android libraries ever made. Go check it out.There are lots and lots of open-source libraries available in Github for you to use for FREE. But don’t get too excited and start using libraries blindly.Check the number of stars that particular library has, the more the better. Check if the author of that library have also created some other popular libraries as well. Check the issues (both open and closed), which can give you a better idea of how robust and stable the library is in production.If you can afford the time, you should dive into the code of that library and check yourself if its really worth it.You just want to ensure that the code you are going to use is reliable, bug-free and high-quality.Pro Tip: Try out any library hosted directly from the command line using Dryrun.We spent most of our time reading others code than writing ourselves. If you are not doing that, START today.Whatever code you are able to write today is only because you have read and learned something, somewhere, someday. It’s just a reflection of what you already know. You can only grow and improve yourself by reading and learning from other’s work.The great thing about Android is that it is a completely open-source platform. Dive into the code and check how they have implemented the framework. There are thousands of open-source libraries in Github. Just pick a library and see how the developer have implemented it.Bonus: Here is a curated list of some of the best libraries and here is a list of almost all open-source Android apps available. You are welcome :-)If you compare coding with writing, then coding standards is like your handwriting.As you would be reading more of others code, other people will also be reading a lot of your code and you don’t want to scare the shit out of them, do you? And if you are working in an organization and collaborating with other developers heavily, do take special care about it.Write short, clean and readable code that YOU and people reading your code would enjoy thoroughly. Your code should read like a story.Don’t complain if you write a piece of code and your colleagues don’t talk to you for a few days.Bonus: To start with, you must thoroughly go through this and this.Never ever, ever make the mistake of releasing your app on the Play Store without using ProGuard. ProGuard not only minifies your code, but it obfuscates your code making it harder for reverse-engineers to understand, replicate and manipulate it.Its absolutely free and comes bundled with the Android SDK, and there is absolutely no reason for you not to use it.I have seen several developers releasing their app on the market without ProGuard. It should not take more than a few hours for a not-so-skilled hacker to manipulate an the app released without Proguard.Pro Tip: But if you want top-notch security, then ProGuard is like a cardboard while you need a safe, and here it is, DexGuard.You will forever thank yourself for choosing a proper architecture in the first place.You can use MVP (Model-View-Presenter) architecture which can decouple your code into different easy-to-manage layers thereby improving code flexibility and greatly reducing maintenance time.There is a great demo project for you to start. And if you are having a hard time grasping it, here is a detailed guide for the beginners.Bonus: Do give a check at this, this and most importantly this. All of these can greatly help you in implementing MVP in your project.If you work for any organization playing the role of “just” an Android developer, you probably won’t need to be too concerned about this, as there are UI/UX designers to take care of this.But if you are an individual developer, you need to get this straight into your head. I have seen developers creating really good apps with great functionality, but the UI looks horrible and the UX makes it a pain to use.Design a clean, simple and beautiful interface that is easy on the eyes. You should not just think like a developer, rather you should concentrate on igniting the hidden designer inside you.Try to create a lasting impression on your users by designing a beautiful UI, so that they keep coming back to your app more often than others and tend to convert more (buy your premium version, maybe).Bonus: You can always get design inspiration from popular designers of Dribble or MaterialUp. And there is this book you probably would love to read if you are interested in design.If you want to create a truly amazing app, you need to heavily rely on analytics tools to analyze the performance and usage of different parts of your app.By analytics, I refer to both crash reporting and app usage tracking and you need both of them.Whatever you do, you can never make something perfect. When real users will start using your app on a variety of Android devices and on various Android versions available, you will even see some of your best written code to fall flat on the ground.Crash reporting tools can help you to track and fix them, one crash at a time.You also need to start thinking like a marketer and analyze the usage of various portions of your app. This is what will help you bridge the gap between what you made and what your users’ actually want.Pro Tip: Use Firebase Crash Reporting and Analytics tools and you can thank me later.If you are an individual developer, you have to think beyond being “just a developer” and have to understand marketing as well.If you are serious about your work and want it to reach a large audience, you need to invest your time and money in properly marketing your app. But before starting your marketing campaigns, ensure that your app is absolutely stable with all features ready. You want maximum conversions from every dime you spend, right?Spend time researching who your competitors are and how you can beat them. Identify the ones you can compete immediately and the ones you have to keep aside for a future fight.Pro Tip: Here is an affordable market analysis tool, I love to use.This is something that most of us generally don’t do, but you should and you need to.There is a big difference between writing code and writing “optimized” code. Write code that runs quickly, takes less memory and consumes less device storage.An unoptimized app works well under normal circumstances, but when put to different stressful situations, it can show you its true colors.Check the amount of memory used by your app and look for memory leaks. Remember, a tiny leak can sink a big ship. Spend time on understanding how the Garbage Collector works in Java, create heap dumps and analyze your live objects.Pro Tip: Use Leak Canary to detect your memory leaks. It can save you a lot of time by automating this task for you.It’s very very likely that you are using Android Studio to develop Android apps and using Gradle as your build system. Gradle is great but its slow and it becomes slower than a snail when your project size starts to grow in size.I remember the countless hours I have wasted just sitting and waiting for the Gradle builds to finish. On heavy work days, I easily wasted around an hour on just Gradle builds and that’s like 5 hours a week draining down the gutter.But, there are ways to speed it up too.You can follow this and this post to significantly improve your build speeds. My build time dropped from 4 minutes to less than 30 seconds after proper optimization.There is nothing more important than testing. This is something that should be at the top of your list.Test your app as thoroughly as possible. Spend time for writing automated test cases. Create various stressful situations for your app and see if it can survive.I had once made the mistake of releasing my app out of hurry and didn’t spend proper time testing it. I was waiting for my users to face bugs, report it and then I would go and fix them.Never, ever, ever do that. You might save a day, or two, or a week by cutting down time from testing, but will probably have to spend more than twice later.Fragmentation is one of the biggest problems in Android and Google seems reluctant to fix it, but you have to live with it.There are a huge variety of Android devices with different screen sizes and hardware specifications from a plethora of different device manufactures who customize the OS to their heart’s content.Added to that are the various Android versions where Google adds/removes API functionality out of nowhere to increase your workload ever further (an example here).For example, not a single Android developer has finished an app without using SharedPreferences API. It’s so common, yet it was broken in Samsung Galaxy S with Android 2.2 (bug report here).Spend more time creating different layouts for different screen sizes. Test on different devices, having different versions, different specifications and from different OEMs.If you are still not using Git, go ahead and start using it right away.When I started Android development, I was unfortunate enough not to know what the fudge Git was. I used to copy my entire project everyday and keep one backup in my hard drive and another in the cloud. Seems foolish? Yes, it absolutely was.Git can dramatically improve your workflow. If someone asks me to name a tool that I use everyday and can’t stop using? It’s Git and Git every time.And probably after using it for a few days you would fall in love with it and want to know how Git works internally, so here it is ready for you.And after some time, you would be starting a big project yourself and get confused on how you should maintain a proper branching model, so here you go.Bonus: If you are just starting out and can’t afford to pay the monthly subscription fee for maintaining private repositories in GitHub, you can try BitBucket which lets you do just that for free.The open-source nature of Android is what makes it vulnerable to attacks. Every Android app can be decompiled, reverse-engineered, ripped open, analyzed and manipulated with ease.You don’t want that to happen to your app, right?You should know how to securely store API keys locally in your app. If you are dealing with sensitive data of the users, then you must know how to encrypt them, what algorithm to choose (secure yet fast).You should also store the encryption keys securely either in the server or locally (if needed). You should prevent your app data from being backed up using the ADB (Android Debug Bridge). If you are storing sensitive data in the database, consider obfuscating it.If your app has a premium version which gets cracked and gets released for free. You would incur a serious loss in business, right?There are several things you can do to prevent your app from getting tampered. There is nothing like 100% security. Any skilled and determined hacker with the right resources, tools and patience can crack your app.All you want to do is make it difficult, rather very difficult for the hacker to crack it.Bonus: Reading this and this should be a good start towards securing your app.Everyone loves to use a high-end Android smartphone, so do I. But remember to keep it for your personal use only and never use it for development purposes.A high-end device will hide a lot of flaws while developing your app. Suppose you are doing something in the UI thread which makes its way for a laggy UI, but on a powerful device, you may never ever notice that.An old, low-end device, dumped with lots of apps makes it ideal for a development device.This is an investment that will pay you forever.While developing big and complex apps, you will face some common problems which have probably been solved before by someone more competent than you, that’s when design patterns comes into play.Start spending some time right from today to learn the Java Design Patterns. Here is a Github project that demonstrates all the design patterns known to mankind.To start off, learn the most important ones like Singleton, Adapter, Factory Method, Iterator, Dependency Injection, Event Driven Architecture, Builder, Callback, Strategy, Facade and Producer Consumer.Seems like a lot? It actually isn’t. You will start loving them once you dive in.Pro Tip: Read books like GoF’s Design Patterns, Refactoring by Martin Fowler and Effective Java by Joshua Bloch.We all have got a lot of help from people around us and from the Internet. Lets admit it.Whenever you have a problem, the first thing you would do is Google that and find the first link from StackOverflow. Sometimes you are in a hurry and you end up copying and pasting the solution from the answer having the highest votes.Ever thought the number of libraries you are using from Github for free and how they have greatly reduced your development time and efforts. Its because someone somewhere has taken the time to build it and contribute to make the community better.Remember the day, when you were stuck in understanding a difficult concept or something which is entirely new to you, and you end up finding an awesome blog post which made it super easy for you. Its because somebody skipped a movie date and wrote that article.Its your time to give back as well. The more you give, the more you get back in return.We all are busy in our own work and we find it too difficult to manage time and do something for others. But try to find some time every week to contribute and make this Android community richer.I have tried to share some of the lessons that I have learned in this short journey with Android development. I will continue my journey, learn more and share even more. I hope it helps someone and makes their life a bit easier.If you like this article, do give it a thumbs up, comment on it and share with with your friends.Android ได้นำความสามารถของ Java 8 บางส่วนมาใช้งาน ซึ่งทำให้เราเขียนโค้ดได้ดีและคลีนยิ่งขึ้นAndroid ไม่ได้รองรับทุกความสามารถของ Java 8 แต่รองรับแค่บางส่วนเท่านั้น และเมื่อเราทำการพัฒนาเราต้องทำการตั้ง targetSdkVersion ไว้ที่ Android 7.0 (API Level 24) ขึ้นไปReflection and language-related APIs:Utility APIs:การที่เราจะใช้งานความสามารถของ Java8 นั้น เราจะต้องทำการ Enabled ซะก่อน ซึ่งพระเอกของงานที่จะเป็นตัวปลุกพลังให้แอพเรานั้นชื่อว่า “Jack” โดยทำการเพิ่มคำสั่งนี้ในไฟล์ build.gradle (module-level)Instant Run ตอนนี้ยังไม่รองรับ Jack นะครับ หากเราเปิดใช้งาน Jack ความสามารถของ Instant Run จะไม่ทำงานตอนนี้เรารู้วิธีเปิดใช้งานความสามารถของ Java 8 และข้อจำกัดของมันแล้วเราก็มาลองใช้งานแต่ละความสามารถที่เด่นๆของมันกันเถอะอย่างที่เรารู้ๆกันคือ interface นั้นจะมีแต่ ​Method Signature เท่านั้น จะไม่มี implement การทำงานอะไรภายในเวลาที่ Class ใดๆก็ตามมีการ implement interface นั้นๆไปใช้งานจะต้องทำการ override Method ภายใน interface ให้ครบทุกตัวหากเราจะทำการเพิ่ม Method said() ใน Interface (IHuman) Class ที่ทำการ implements IHuman นั้นจะต้องทำการ override Method ใหม่ถ้าเรามี Class ที่ override IHuman หลายๆClass เราต้องมาไล่ update override ให้ครบทุก Class แลดูเสียเวลาเนอะ ใน Java 8 เลยได้ทำการเพิ่มความสามารถที่จะช่วยแก้ปัญหาจุดนี้นั้นคือ Default interface methods และไม่ใช่แค่แก้ปัญหาในการต้องไล่ update override ให้ครบทุก Class แต่ยังสามารถ implement การทำงานเข้าไปใน Method ของ interface ได้โดยตรงเลยด้วยทำการสั่ง print “Hello” ใน interface เจ๋งป่ะละ และ Class ที่ implement interface ไปใช้นั้นไม่ต้อง override Default methods ใหม่ด้วยเรียกใช้งานได้เหมือน Method ที่ override จาก Interface เลยDefault and static interface methods นั้นรองรับเฉพาะ API Level 24 ขึ้นไปเท่านั้นLambda expressions นั้นเป็นอีกหนึ่งความสามารถที่หลายๆภาษาเริ่มนำเข้ามาใช้ ด้วยลักษณะการใช้งานที่กระชับทำให้โค้ดดูคลีนและอ่านง่าย ทำให้ได้รับความนิยมอย่างมากผมจะยกตัวอย่างการใช้งาน Lambda expressions ที่เห็นเด่นชัดใน Android นั้นก็คือ OnClick()จากเดิมเราจะต้องทำการ new OnClickListener ให้กับ setOnClickListener และยังต้อง override Method เข้ามาอีกแต่หากเราใช้ความสามารถของ Lambda expressionsโค้ดของเราจะดูคลีนดูสะอาดตาขึ้นมาทันที และ หากเราเขียนโค้ดแบบเต็ม Android Studio ยังทำการ Suggest ให้เราใช้ Lambda expressions อีกด้วยแต่หากอยากใช้ Lambda expressions แต่ไม่พร้อมจะใช้ Jack เนื่องด้วยข้อจำกัดหลายๆอย่างนั้น เราก็มีตัวช่วยมานำเสนอ หนึ่งในนั้นก็คือ Retrolambdaวิธีการติดตั้งนั้นใช้วิธีเพิ่มคำสั่งผ่าน Gradle สามารถทำตามได้จาก Retrolambda-GitHubมันคือการที่เราใช้ Annotations ซ้ำๆได้หลายครั้ง โดยปกติการสั่งใช้งาน Annotations ซ้ำกัน Compiler จะแจ้ง Error Duplicate annotationsแต่หากเราจะใช้ความสามารถของ Repeating Annotations นั้น จะต้องทำการใช้ @Repeatable Interface ที่เราต้องการให้สามารถใช้ได้ซ้ำๆหลายครั้งจากโค้ดข้างบนเราทำการ set Color name ผ่าน Annotation Colorให้กับ Shirt สามค่าด้วยกันโดยที่ Compiler ไม่แจ้ง Errorจากนั้นเราจะลองทดสอบดูว่า Shirt มี Color name ทั้งสามค่าจริงไหมได้ผลออกมาตรงกับที่เรา set ค่าผ่าน Repeating Annotations เป๊ะเป็น feature ที่เกี่ยวข้องกันกับ Lambda Expression มันช่วยให้เราเรียกใช้งาน constructors หรือ methods แบบรูปย่อได้ประเภทของ Method References และการใช้งานแต่ละประเภทสามารถดูตัวอย่างได้จากโค้ดด้านล่างเลยจ้า คลีนขึ้นเยอะ :)glhf , ez , :)blog อีกช่องทางหนึ่งของผู้เขียน : http://wanttobeanandroiddev.blogspot.comT he most popular and the most widely used language for Android development is undoubtedly Java. But that certainly doesn’t mean it is the best choice for the developers out there today. The biggest problem with Java is that it is old, verbose, error-prone and not a “modern language” in any way.They are trying to bridge the gap with Java 8, bringing some modern flavors to the language but Android certainly doesn’t use all the features of Java 8 and we are still stuck in the old Java 7 and 6-ish world which is probably not going to improve much in the foreseeable future.But the good thing is that we have Kotlin to the rescue and in this article, we will be learning why it’s the right time to start using the more modern, sophisticated and pragmatic language for Android development.I know you have been using Java for years (maybe even decades) and you are extremely familiar with it. You know the language from corner-to-corner and also several undocumented things which can only come up with years of experience.And now when a new language comes in town and someone tells you to switch to it, you are quite skeptical about it and believe me, I was too. I have been using Java for quite a long time now and have formed a love-hate relationship with it.I was not at all convinced to switch from Java initially but when I started looking into the bigger picture with an open mind, things really took the turn.Java was really one of the best languages back then but things do change with time. And things are even worse in Android where we don’t have support for lambdas, method references, streams, try-with-resources (minSdk ≥ 19), javax.time APIs in the old Java 7 or 6 world.But there are some third-party ways of backporting some of these features like RetroLambda, Streams backport, ThreeTenABP, but that’s always a hassle, isn’t it?Android Nougat also made a bold attempt of bringing some of the Java 8 features using the Jack compiler but most of them are only usable if you target minSdkVersion of 24, which you really shouldn’t considering how slow Android users are in getting updates.Check out the platform version distribution chart here.One of the biggest flaws in Java is the way it handles “null” leading to the dreaded NulPointerException (popularly known as The Billion Dollar Mistake).One of the most common reasons for crashes in Android apps today is the NullPointerException. It’s really a big deal in the industry today. It is almost impossible to have an app in production without a single NullPointerException (if you do, please tell me about it, I would be interested to hear ;-)).And Nullability is an even bigger problem in Android. Null is a very efficient and simple way of representing the absence of a value and Android uses it everywhere in its framework and its APIs making it even more difficult for us to handle them.Another problem we often ignore is the way Java implements non-static Inner classes and Anonymous Inner classes which always keeps an implicit reference to the outer class thereby making your app susceptible to memory leaks.There are several other language design flaws making it a really painful experience for developers sometimes.We developers always love clean and concise code. Less code takes less time to write and is less susceptible to bugs. But with Java, you always have to write a lot of code to get even the “simplest” thing done. You should have already noticed this, didn’t you?There is a lot of “ceremony” involved in Java APIs and Android makes it even worse by burdening the developers to do a lot of things in a particular order to get most things done, like accessing the database, fragment transactions and so many more.Fixing all of these can certainly improve the experience and productivity of the developers considerably.The good thing is that we have Kotlin, a statically-typed JVM based language developed by JetBrains. It has been developed completely as an open-source project giving special importance to Android development.Kotlin comes from the good folks at JetBrains, the guys behind the best IDEs like IntelliJ and our beloved Android Studio. They understand the pain we developers face in our day-to-day development workflow and are trying to address the real use cases in this language.Not only that, they are also using Kotlin in production to develop their own products as well so it is highly unlikely that this project will get abandoned anytime soon.Whereas the other JVM based languages tend to completely forget that Java (and the plethora of Java libraries) even exists and wants to re-implement everything, Kotlin takes the complete opposite path where it acknowledges the fact that Java is a “big thing” and improves over its limitations.This is the first thing I loved when I heard about Kotlin. You can call Java code from Kotlin and vice-versa seamlessly. Both Kotlin and Java generate the same bytecode and you have nothing to worry that you are shipping something completely different with Kotlin.You can start using Kotlin in your existing project with all your old Java code straight away. Start by writing some simple and small parts of your app in Kotlin as you slowly start getting familiar with the language, its constructs and its syntax (which is btw, super simple :-)).You don’t need to convert your entire project to Kotlin right from the beginning. Like, I have started using Kotlin in a significantly large project where I have started writing some minimal UI components and simple business logic in Kotlin at first. Currently, only 4–5% of the entire codebase is in Kotlin and the rest is still the legacy Java code I have been writing for months (which I will convert eventually).But the mix and match of Java and Kotlin is working really well in my project. The interoperability is truly a blessing in disguise.I have been developing Android apps for around 3 years now and one of the most common reasons for crashes in our apps have been the NullPointerExceptions.We have spent a lot of time and resources fixing a plethora of NPEs in several of ours apps. Guarding your code with null checks everywhere becomes seriously a very time-consuming and boring task which could have been spent in a more productive way otherwise.And the great thing about Kotlin is that null-safety is a part of the type system itself. It is so much better to catch nulls during the compile time than crashing your app at runtime.For example, in Kotlin, all variables default to non-null and if you want a nullable variable you mark it with a “?”. Suppose you have a String variable and you are trying to assign a value to it, everything works just fine,Now, if you try to do this,The compiler fails to compile and gives you this message, “Null can not be a value of a non-null type String”. This happens because all variables default to non-null and you have to explicitly tell the compiler that you want a nullable variable.And now it compiles fine but you have to be careful while accessing this variable. With this type system in place, it is very difficult for NPEs to occur in your app at runtime as they will be caught and addressed at compile-time itself.You have very little to worry about in this department when you know that Kotlin is a JetBrains product, the ones who specialize in creating some of the best and most used IDEs in the world.There is a plugin that you can install in Android Studio to get Kotlin working in your project. Yes, it’s that simple. They have an Eclipse plugin if you are still using Eclipse (seriously, are you?).All IDE features work perfectly in Kotlin. You can mix and match Kotlin and Java code in the same project and everything still works great. The IDE support is really great with Kotlin where other JVM based languages don’t even come close.Another amazing feature that the Kotlin plugin brings to Android Studio is “Convert Java File to Kotlin Feature” and I loved it so much when I saw it for the first time. All you need to do is give it your old Java file and in one-click, it can convert it to its equivalent Kotlin file.I have converted several Java files to Kotlin using this feature and have found it working really well 99% of the time. Read more about it here.Now with Kotlin you write significantly less amount of code than you have ever written with Java. Kotlin files are significantly smaller and more concise than their Java equivalents.Writing less code, takes less time and is less prone to bugs or human errors. The Java files consistently shrink even when you convert them to Kotlin using the plugin in Android Studio. I have converted several Java files of various sizes into Kotlin in my project and I am yet to find a case where this is not true.The Kotlin syntax is not verbose like that of Java. It is very crisp, concise and reduces a lot of boilerplate code that we developers have to write every day.For instance, just take a look at this. We all use click listeners in our Android apps,Just to perform an action on the click of a button, there is so much code and ceremony involved. Now just have a look at the Kotlin equivalent,See for yourself how simple and tight the syntax is. Just have a quick look at the Kotlin language reference and you will surely love the conciseness and simplicity of it even more.Kotlin is suddenly not the new kid in town. It has been there for a few years now but JetBrains kept it closed to themselves until now. Kotlin has been developed to solve the everyday real-world problems that we developers have to deal with.Kotlin, unlike some other JVM-based languages doesn’t come from an academic or research standpoint. A programming language is simply a “tool” that we developers use to build applications and the idea is to take real use cases in mind and improve this “tool” further.It is always tempting to rebuild or re-implement everything from scratch and JetBrains could have done that with Kotlin but they didn’t. The goal is not that, but the goal is to build a “truly useful programming language” that will make our lives easier.By now you should be quite convinced as why Kotlin is the kind of language you had always wished for and you finally have it. Kotlin makes Android development a lot more fun again. It’s like giving a new toy to a kid who was bored for a long time the same old one and when the new toy is so much better than the old one.So what are you waiting for? Go ahead, open Android Studio, download the Kotlin plugin and get started right away. This article was originally published on TechBeacon.Click the 💚 below to show your support and share it with other fellow Medium users.W orldwide, Android is installed on 66% of mobile devices, while iOS is used by 24% of the global users. But in countries, where users generates more revenue (like USA or UK) more people uses an iOS (58% iOS and 40% Android in USA and 53% iOS and 40% Android in UK).That is why most companies focus their app development on both platforms. Having an Android app results in popularity (but not in all countries) and iOS basically means bigger earnings.To handle both platforms we need to create two native apps or use one of the cross-platform mobile framework. Some frameworks enables developers to write only one project and launch it on both platforms, losing some native profits.Web-based frameworks like PhoneGap or Ionic allows developers to quickly create an Android and iOS app using HTML, CSS and JavaScript. However those apps are basically a webview with embedded web app. This idea may look promising but in the end apps have terrible performance, UI is looking not so well, access to the platform API is very limited, using any native library is impossible and hard-to-trace issues.While moving toward native apps we gain better performance (and usually happier developers) with native UI views and better platform API support.In Xamarin (not Xamarin.forms) views has to be designed natively but it provides vast platform API support (C#). However using native libraries is still impossible and you have to rely on “Xamarin Components” — some libraries rewritten in C#.And there is one more special framework, which requires some special attention - Multi-OS Engine - the closest option to native development.An open-source framework created by Migeran and developed by Intel. It enables developers to create Android and iOS app in Java (or Kotlin).But the most important and innovative thing here is that:Magic of this framework lies in the Nat/J - the bridge between native iOS code and Java. Using plugins it can be used to generate Java bindings for iOS native views or even CocoaPods!You will need OS X (or Windows - it is a little bit harder there) and completely working Android Studio and Xcode. Full specification is available here.Enabling iOS support is basically adding a new java (or kotlin) module to the project.If you keep your Android project in a clean Model-View-Presenter architecture adding iOS view layer by Multi-OS Engine is quite easy.That’s next steps of enabling iOS support can be done at any point of developing an Android app. You can start with iOS in the beginning or add it later.Take a look at your run configurations. Now you are able to run and debug your iOS app from Android studio while working on a iOS Simulator or connected iPhone/iPad device.Now, let’s switch to Xcode and add some native views. Right click on iOS project and Multi-OS Engine Actions &gt; Open project in Xcode.In Xcode open your storyboard file and modify the views as you wish. I highly recommend here to spend some time and watch some iOS UI tutorials. To continue you should have your views created and linked to view controllers classes headers.Then proceed back to Android Studio, select your iOS project with right click and select Multi-OS Engine &gt; Create new binding. Name it and fill it as below:It will create an Java class named MainViewController in selected package.Here you have remember to:Now you are able to use your Java classes from commons (maybe subscribing to some RxJava subjects?) and fully access native iOS SDK.In case of any problems, issues questions I highly recommend to check official Multi-OS Engine forum: http://discuss.multi-os-engine.orgUsually every issue is solved there, the community is extremly helpful, nice and it’s growing intensively. Also there is a very high probability that your issue will be solved by the creators of this framework, who spend a lot of their time helping developers.I have spent last few months exploring and working with Multi-OS Engine to develop the SlideCase Android and iOS apps. It truly was a great adventure and I cannot wait to write next story about using native CocoaPods.If you have any questions, please don’t hesitate to reach me using:LinkedIn.com/in/mateuszbartos/Twitter.com/mateusz_bartosFacebook/bartosmateusz"
  }
]