[
  {
    "link": "https://medium.com/@wiwatSrt/install-l5starter-on-laravel-5-4-3c6677bafd1b?source=---------0-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/0*4MaUFg0mHDruHYCo.",
    "author": "Wiwat Srisattha",
    "date": "Mar 18",
    "photo": "https://cdn-images-1.medium.com/max/800/1*Se8ul-AsEfYHiR9yyReUVg.png",
    "head": "Install L5Starter on Laravel 5.4",
    "contents": "Remember to:Screenshortjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersand add in aliasesPublish ConfigurationRunning Authentication QuickstartRunning MigrationsNote: Laravel 5.4: Specified key was too long errorjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning MigrationsRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersYou can publish the migration withRunning MigrationsYou can publish the seeders withRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpFirst add the Spatie\\Permission\\Traits\\HasRoles-trait to your User model.The package doesn’t contain a middleware to check permissions but it’s very trivial to add this yourself.This will create a RoleMiddleware for you, where you can handle your role check.Don’t forget to add the route middleware to your Kernel:just addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpLogin with"
  },
  {
    "link": "https://medium.com/@nickdenardis/zero-downtime-local-build-laravel-5-deploys-with-deployer-a152f0a1411f?source=---------1-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/0*IGYtyZZuaEtv2_fa.png",
    "author": "Wiwat Srisattha",
    "date": "Mar 20",
    "photo": "https://cdn-images-1.medium.com/max/600/1*VzUfWT1RMrpOny4jmSCi8A.png",
    "head": "Zero downtime local build Laravel 5 deploys with Deployer",
    "contents": "Remember to:Screenshortjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersand add in aliasesPublish ConfigurationRunning Authentication QuickstartRunning MigrationsNote: Laravel 5.4: Specified key was too long errorjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning MigrationsRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersYou can publish the migration withRunning MigrationsYou can publish the seeders withRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpFirst add the Spatie\\Permission\\Traits\\HasRoles-trait to your User model.The package doesn’t contain a middleware to check permissions but it’s very trivial to add this yourself.This will create a RoleMiddleware for you, where you can handle your role check.Don’t forget to add the route middleware to your Kernel:just addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpLogin withMoving beyond EnvoyLaravel Envoy (version 5.4) was a nice leap forward from Rocketeer, which ported Capistrano’s zero downtime deploy to PHP. Laravel’s response, Envoy, is a “do it yourself” minimalist tool compared to Rocketeer’s pre-built recipes that were almost plug-and-play.Working with one or two projects, using a service like Envoyer to deploy sites isn’t a problem. But when the number of projects hits over 100, the cost becomes a burden. Using a per project deployment is the only cost effective approach.A single file, Envoy.blade.php, 300 lines (or more) with literal commands that rely on Blade to store and output variables. A mix of PHP, Blade and SSH feels like an uncomfortable mesh of concerns.A single task is a shell script written in Blade:The inability to extract these self contained tasks into PSR loaded files is more irritating than it should be.Deployer (version 4.3) takes the modern PHP approach to deployment with a PSR loaded package, object-oriented, self contained and reusable throughout any deployment strategy.It is framework independent and easily extendable.Although a ‘do it yourself” option is available, it comes packaged with starter scripts for Laravel, Symfony, Yii, Zend, CakePHP, CodeIgniter, and Drupal. Additionally, a host of “Recipes” are maintained independently for specific deploy tasks.The base Laravel deploy is pretty basic and would work perfect for most use cases, but clones and builds on the remote servers. Let’s combine it with the Local, RSYNC and NPM builds to shift all build requirements to the continuous integration (CI) server. This frees up the software needed on the production servers and ensures tests are passing before deploy.View full deploy.php as gistThe resulting file is ~90 lines of mostly configuration and two custom functions. It is clear what the script does and gets the benefit of updating as the package evolves.Although every environment is different, with this starter script it is possible to add more build steps, more test requirements and additional servers."
  },
  {
    "link": "https://tech.kartenmacherei.de/announcing-the-first-phpunit-code-sprint-in-hamburg-dd28032bf709?source=---------2-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*sza0B6qcWiREgMx6RaUliA.jpeg",
    "author": "",
    "date": "Feb 20",
    "photo": "https://cdn-images-1.medium.com/max/1000/1*Wzoi2FoZAtHxWtI-NHAkAg.png",
    "head": "Announcing the first PHPUnit Code Sprint in Hamburg",
    "contents": "Remember to:Screenshortjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersand add in aliasesPublish ConfigurationRunning Authentication QuickstartRunning MigrationsNote: Laravel 5.4: Specified key was too long errorjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning MigrationsRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersYou can publish the migration withRunning MigrationsYou can publish the seeders withRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpFirst add the Spatie\\Permission\\Traits\\HasRoles-trait to your User model.The package doesn’t contain a middleware to check permissions but it’s very trivial to add this yourself.This will create a RoleMiddleware for you, where you can handle your role check.Don’t forget to add the route middleware to your Kernel:just addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpLogin withMoving beyond EnvoyLaravel Envoy (version 5.4) was a nice leap forward from Rocketeer, which ported Capistrano’s zero downtime deploy to PHP. Laravel’s response, Envoy, is a “do it yourself” minimalist tool compared to Rocketeer’s pre-built recipes that were almost plug-and-play.Working with one or two projects, using a service like Envoyer to deploy sites isn’t a problem. But when the number of projects hits over 100, the cost becomes a burden. Using a per project deployment is the only cost effective approach.A single file, Envoy.blade.php, 300 lines (or more) with literal commands that rely on Blade to store and output variables. A mix of PHP, Blade and SSH feels like an uncomfortable mesh of concerns.A single task is a shell script written in Blade:The inability to extract these self contained tasks into PSR loaded files is more irritating than it should be.Deployer (version 4.3) takes the modern PHP approach to deployment with a PSR loaded package, object-oriented, self contained and reusable throughout any deployment strategy.It is framework independent and easily extendable.Although a ‘do it yourself” option is available, it comes packaged with starter scripts for Laravel, Symfony, Yii, Zend, CakePHP, CodeIgniter, and Drupal. Additionally, a host of “Recipes” are maintained independently for specific deploy tasks.The base Laravel deploy is pretty basic and would work perfect for most use cases, but clones and builds on the remote servers. Let’s combine it with the Local, RSYNC and NPM builds to shift all build requirements to the continuous integration (CI) server. This frees up the software needed on the production servers and ensures tests are passing before deploy.View full deploy.php as gistThe resulting file is ~90 lines of mostly configuration and two custom functions. It is clear what the script does and gets the benefit of updating as the package evolves.Although every environment is different, with this starter script it is possible to add more build steps, more test requirements and additional servers.Most of the applications we build are written in PHP, so it’s safe to say that PHP is a key technology we are depending and relying on. In our ongoing quest to create sustainable code we make heavy use of automated tests and for us PHPUnit is THE tool to write and execute them. If you’re into details on how we actually test our software, check out the slides of our talk “99% is not enough” on Slideshare.Even though PHPUnit is such a critical part of our daily work at tech.kartenmacherei, we never had to pay a cent for it, as it is open source software, just like PHP itself. Sebastian Bergmann (and many other contributors) have spent thousands of hours writing, maintaining and documenting PHPUnit over the past 15+ years, strengthening PHP’s professional standing in the tech world.Considering the supposedly insane amount of money we have saved by using it, we kind of feel indebted to the community that makes this possible.There are several ways to contribute to open source projects for companies like us. First of all, we could simply say “thank you” to Sebastian Bergmann by buying him something of his Amazon Wishlist. But we also want to contribute to PHPUnit itself in a way that helps to secure the future of the tool.Actively supporting open source projects as a company might also increase our reputation in the tech community and make developers aware of us. While this is not the primary reason for our efforts, it is of course a very welcome bonus.With the support of Sebastian Bergmann we decided to host the first ever two-day code sprint solely dedicated to contributing to PHPUnit at our Hamburg office. This way we can introduce interested developers to the inner workings of PHPUnit and hopefully also win one or two new regular contributors for the project.Date: 31st of March &amp; 1st of AprilLocation: tech.kartenmacherei, Neustädter Neuer Weg 22, 20459 HamburgWe will provide a working space for 20 participants and also cover lunch for everyone on both days. Sebastian Bergmann will kick off the sprint by presenting the current state of PHPUnit and covering some internals to get you started. He will be around the whole time to answer questions.We will prepare a list of bugs and features that can be worked on, but feel free to also bring your own ideas. Is there a bug that has been annoying you for years? Here you can fix it yourself with help from friends.If you are interested in participating, please register for a free ticket here: https://www.xing-events.com/TAPMSNJ.html. As there is only a very limited amount of tickets, please make sure to let us know as early as possible if you cannot make it so we can give your ticket to someone else."
  },
  {
    "link": "https://medium.com/@Sirolad/validating-xml-against-xsd-in-php-5607f725955a?source=---------3-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*GhhpdrZHz8a5qe5UcgRc0g.jpeg",
    "author": "Nick DeNardis",
    "date": "Mar 22",
    "photo": "https://cdn-images-1.medium.com/max/800/1*AwKunhZMuSu_sD0d1dRuFw.jpeg",
    "head": "Validating large XML data against XSD in PHP",
    "contents": "Remember to:Screenshortjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersand add in aliasesPublish ConfigurationRunning Authentication QuickstartRunning MigrationsNote: Laravel 5.4: Specified key was too long errorjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning MigrationsRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersYou can publish the migration withRunning MigrationsYou can publish the seeders withRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpFirst add the Spatie\\Permission\\Traits\\HasRoles-trait to your User model.The package doesn’t contain a middleware to check permissions but it’s very trivial to add this yourself.This will create a RoleMiddleware for you, where you can handle your role check.Don’t forget to add the route middleware to your Kernel:just addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpLogin withMoving beyond EnvoyLaravel Envoy (version 5.4) was a nice leap forward from Rocketeer, which ported Capistrano’s zero downtime deploy to PHP. Laravel’s response, Envoy, is a “do it yourself” minimalist tool compared to Rocketeer’s pre-built recipes that were almost plug-and-play.Working with one or two projects, using a service like Envoyer to deploy sites isn’t a problem. But when the number of projects hits over 100, the cost becomes a burden. Using a per project deployment is the only cost effective approach.A single file, Envoy.blade.php, 300 lines (or more) with literal commands that rely on Blade to store and output variables. A mix of PHP, Blade and SSH feels like an uncomfortable mesh of concerns.A single task is a shell script written in Blade:The inability to extract these self contained tasks into PSR loaded files is more irritating than it should be.Deployer (version 4.3) takes the modern PHP approach to deployment with a PSR loaded package, object-oriented, self contained and reusable throughout any deployment strategy.It is framework independent and easily extendable.Although a ‘do it yourself” option is available, it comes packaged with starter scripts for Laravel, Symfony, Yii, Zend, CakePHP, CodeIgniter, and Drupal. Additionally, a host of “Recipes” are maintained independently for specific deploy tasks.The base Laravel deploy is pretty basic and would work perfect for most use cases, but clones and builds on the remote servers. Let’s combine it with the Local, RSYNC and NPM builds to shift all build requirements to the continuous integration (CI) server. This frees up the software needed on the production servers and ensures tests are passing before deploy.View full deploy.php as gistThe resulting file is ~90 lines of mostly configuration and two custom functions. It is clear what the script does and gets the benefit of updating as the package evolves.Although every environment is different, with this starter script it is possible to add more build steps, more test requirements and additional servers.Most of the applications we build are written in PHP, so it’s safe to say that PHP is a key technology we are depending and relying on. In our ongoing quest to create sustainable code we make heavy use of automated tests and for us PHPUnit is THE tool to write and execute them. If you’re into details on how we actually test our software, check out the slides of our talk “99% is not enough” on Slideshare.Even though PHPUnit is such a critical part of our daily work at tech.kartenmacherei, we never had to pay a cent for it, as it is open source software, just like PHP itself. Sebastian Bergmann (and many other contributors) have spent thousands of hours writing, maintaining and documenting PHPUnit over the past 15+ years, strengthening PHP’s professional standing in the tech world.Considering the supposedly insane amount of money we have saved by using it, we kind of feel indebted to the community that makes this possible.There are several ways to contribute to open source projects for companies like us. First of all, we could simply say “thank you” to Sebastian Bergmann by buying him something of his Amazon Wishlist. But we also want to contribute to PHPUnit itself in a way that helps to secure the future of the tool.Actively supporting open source projects as a company might also increase our reputation in the tech community and make developers aware of us. While this is not the primary reason for our efforts, it is of course a very welcome bonus.With the support of Sebastian Bergmann we decided to host the first ever two-day code sprint solely dedicated to contributing to PHPUnit at our Hamburg office. This way we can introduce interested developers to the inner workings of PHPUnit and hopefully also win one or two new regular contributors for the project.Date: 31st of March &amp; 1st of AprilLocation: tech.kartenmacherei, Neustädter Neuer Weg 22, 20459 HamburgWe will provide a working space for 20 participants and also cover lunch for everyone on both days. Sebastian Bergmann will kick off the sprint by presenting the current state of PHPUnit and covering some internals to get you started. He will be around the whole time to answer questions.We will prepare a list of bugs and features that can be worked on, but feel free to also bring your own ideas. Is there a bug that has been annoying you for years? Here you can fix it yourself with help from friends.If you are interested in participating, please register for a free ticket here: https://www.xing-events.com/TAPMSNJ.html. As there is only a very limited amount of tickets, please make sure to let us know as early as possible if you cannot make it so we can give your ticket to someone else.It’s 2017 and you still prefer using XML(Extensible Markup Language) to JSON(JavaScript Object Notation) for data-interchange? Well, that is not the point about this article. Everything you want to say about the trade-offs of either of them has been dealt with here. But there are still a lot of systems using XML today and I can assure you that it would still be the case X years from now.Validating XML against XSD might be the first step to take especially when building a feed Reader/Ingester. For Starters, any file like the sample below is a well-formed XML file.and below is a sample XSD (XML Schema Definition) file.Writing a XSD for your XML is actually easy to do, you make use of tools like freeformatter or do a crash course on w3Schools.Now, we are ready to validate our XML file against the XSD using either DOMDocument or XMLReader. First, make sure that these extensions are enabled on your PHP installation.Validating With DOMDocumentThis DomValidator can be easily used like so:The above piece of code is actually easy to understand, the most important method here is the validateFeeds() method.Validating With XMLReaderThe upside of using XMLReader over DomDocument is scalability. XMLReader can handle very large files better than DomDocument. Our class will be very similar to that of DomDocument. Also note that your libxml version is above 2.6.We use this class too similar to how we used the DomValidator class.So that’s it. I hope to follow this up with ingesting feeds very soon. You can reach me on surajudeen.akande@andela.com for feedback, I will appreciate it."
  },
  {
    "link": "https://hackernoon.com/tarantool-stress-testing-1195f33254f9?source=---------4-----------",
    "pic": "https://cdn-images-1.medium.com/fit/c/36/36/1*ShQL7rv4d93ltT5TiDjf9A.jpeg",
    "author": "",
    "date": "Mar 17",
    "photo": "https://cdn-images-1.medium.com/max/800/0*BPzce8ohinyLH045.",
    "head": "Stress test for Nginx + PHP + Tarantool",
    "contents": "Remember to:Screenshortjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersand add in aliasesPublish ConfigurationRunning Authentication QuickstartRunning MigrationsNote: Laravel 5.4: Specified key was too long errorjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning MigrationsRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpjust addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersYou can publish the migration withRunning MigrationsYou can publish the seeders withRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpFirst add the Spatie\\Permission\\Traits\\HasRoles-trait to your User model.The package doesn’t contain a middleware to check permissions but it’s very trivial to add this yourself.This will create a RoleMiddleware for you, where you can handle your role check.Don’t forget to add the route middleware to your Kernel:just addto your composer.json. Then run composer install or composer update.Then in your config/app.php add in providersPublish ConfigurationRunning SeedersAdd menu in resources/views/vendor/l5starter/admin/partials/sidebar.blade.phpLogin withMoving beyond EnvoyLaravel Envoy (version 5.4) was a nice leap forward from Rocketeer, which ported Capistrano’s zero downtime deploy to PHP. Laravel’s response, Envoy, is a “do it yourself” minimalist tool compared to Rocketeer’s pre-built recipes that were almost plug-and-play.Working with one or two projects, using a service like Envoyer to deploy sites isn’t a problem. But when the number of projects hits over 100, the cost becomes a burden. Using a per project deployment is the only cost effective approach.A single file, Envoy.blade.php, 300 lines (or more) with literal commands that rely on Blade to store and output variables. A mix of PHP, Blade and SSH feels like an uncomfortable mesh of concerns.A single task is a shell script written in Blade:The inability to extract these self contained tasks into PSR loaded files is more irritating than it should be.Deployer (version 4.3) takes the modern PHP approach to deployment with a PSR loaded package, object-oriented, self contained and reusable throughout any deployment strategy.It is framework independent and easily extendable.Although a ‘do it yourself” option is available, it comes packaged with starter scripts for Laravel, Symfony, Yii, Zend, CakePHP, CodeIgniter, and Drupal. Additionally, a host of “Recipes” are maintained independently for specific deploy tasks.The base Laravel deploy is pretty basic and would work perfect for most use cases, but clones and builds on the remote servers. Let’s combine it with the Local, RSYNC and NPM builds to shift all build requirements to the continuous integration (CI) server. This frees up the software needed on the production servers and ensures tests are passing before deploy.View full deploy.php as gistThe resulting file is ~90 lines of mostly configuration and two custom functions. It is clear what the script does and gets the benefit of updating as the package evolves.Although every environment is different, with this starter script it is possible to add more build steps, more test requirements and additional servers.Most of the applications we build are written in PHP, so it’s safe to say that PHP is a key technology we are depending and relying on. In our ongoing quest to create sustainable code we make heavy use of automated tests and for us PHPUnit is THE tool to write and execute them. If you’re into details on how we actually test our software, check out the slides of our talk “99% is not enough” on Slideshare.Even though PHPUnit is such a critical part of our daily work at tech.kartenmacherei, we never had to pay a cent for it, as it is open source software, just like PHP itself. Sebastian Bergmann (and many other contributors) have spent thousands of hours writing, maintaining and documenting PHPUnit over the past 15+ years, strengthening PHP’s professional standing in the tech world.Considering the supposedly insane amount of money we have saved by using it, we kind of feel indebted to the community that makes this possible.There are several ways to contribute to open source projects for companies like us. First of all, we could simply say “thank you” to Sebastian Bergmann by buying him something of his Amazon Wishlist. But we also want to contribute to PHPUnit itself in a way that helps to secure the future of the tool.Actively supporting open source projects as a company might also increase our reputation in the tech community and make developers aware of us. While this is not the primary reason for our efforts, it is of course a very welcome bonus.With the support of Sebastian Bergmann we decided to host the first ever two-day code sprint solely dedicated to contributing to PHPUnit at our Hamburg office. This way we can introduce interested developers to the inner workings of PHPUnit and hopefully also win one or two new regular contributors for the project.Date: 31st of March &amp; 1st of AprilLocation: tech.kartenmacherei, Neustädter Neuer Weg 22, 20459 HamburgWe will provide a working space for 20 participants and also cover lunch for everyone on both days. Sebastian Bergmann will kick off the sprint by presenting the current state of PHPUnit and covering some internals to get you started. He will be around the whole time to answer questions.We will prepare a list of bugs and features that can be worked on, but feel free to also bring your own ideas. Is there a bug that has been annoying you for years? Here you can fix it yourself with help from friends.If you are interested in participating, please register for a free ticket here: https://www.xing-events.com/TAPMSNJ.html. As there is only a very limited amount of tickets, please make sure to let us know as early as possible if you cannot make it so we can give your ticket to someone else.It’s 2017 and you still prefer using XML(Extensible Markup Language) to JSON(JavaScript Object Notation) for data-interchange? Well, that is not the point about this article. Everything you want to say about the trade-offs of either of them has been dealt with here. But there are still a lot of systems using XML today and I can assure you that it would still be the case X years from now.Validating XML against XSD might be the first step to take especially when building a feed Reader/Ingester. For Starters, any file like the sample below is a well-formed XML file.and below is a sample XSD (XML Schema Definition) file.Writing a XSD for your XML is actually easy to do, you make use of tools like freeformatter or do a crash course on w3Schools.Now, we are ready to validate our XML file against the XSD using either DOMDocument or XMLReader. First, make sure that these extensions are enabled on your PHP installation.Validating With DOMDocumentThis DomValidator can be easily used like so:The above piece of code is actually easy to understand, the most important method here is the validateFeeds() method.Validating With XMLReaderThe upside of using XMLReader over DomDocument is scalability. XMLReader can handle very large files better than DomDocument. Our class will be very similar to that of DomDocument. Also note that your libxml version is above 2.6.We use this class too similar to how we used the DomValidator class.So that’s it. I hope to follow this up with ingesting feeds very soon. You can reach me on surajudeen.akande@andela.com for feedback, I will appreciate it.Original article available at https://habrahabr.ru/post/322266/In the article Tarantool: the Good, the Bad and the Ugly, I described a simple voting service and provided the working PHP code. You saw how easy it is to use this NoSQL database in your own project. However, one thing has remained unclear — why I picked a NoSQL database in the first place and what performance gains it offers as compared to a traditional database. This article will be about exactly that. To answer this question, I’m going to test one of my servers that hosts a virtual machine with 1 GB of RAM and the following CPU:The SSD disk subsystem is pretty decent:My hosting provider claims the virtual server bandwidth is 100 Mbit. Even though some tests I ran showed a higher network speed, let’s assume the 100 Mbit cap is true. A few words about the software I’m using: Nginx 1.6.2, PHP/PHP-FPM, Tarantool 1.7.3.I’ll do the testing with a utility called wrk. After running wrk several times with different parameters and some tuning of Nginx, the latter ended up having the following configuration:In the end, wrk generated 50 parallel requests. If the number is lower, it’s impossible to achieve the server’s peak performance. At 100 and higher, the RPS performance does improve a little, but the latency skyrockets; in other words, increasing the number of parallel requests beyond a reasonable limit leads to inevitable losses. Here’s a picture that’s worth a thousand words:The image is taken from Konstantin Osipov’s article Tips and tricks for queue processing (in Russian)The round-trip delay time between the server being tested and the traffic generator was 32 ms. After I ran some preliminary tests, I restarted my server, just in case, to obtain a less biased result. I got the following results:The server received slightly less than 900 RPS with the latency of 54 ms. Is it good or bad? Let’s recall what happens in the script of the voting service on a page hit:These four steps take about 1 ms on a virtual private server with the lowest configuration possible! Over one million records were inserted into the session table during the testing, and it didn’t affect the server performance at all. Not too bad, right?You can get some more details by using the top utility. As I mentioned earlier, I restarted my server prior to testing. I made the screenshot below at the beginning of the second (counting from the restart) benchmark.This image shows how CPU time is distributed across different tasks. About a quarter is consumed by Tarantool. PHP-FPM handlers turned out to be major time consumers, which was to be expected. Nginx holds the third place in terms of resource consumption. As I increased the number of parallel requests in wrk, Nginx required more and more CPU time. As a result, PHP-FPM didn’t get enough resources and the log files featured errors 499 and 502.It would be a logical next step to rewrite the application and replace Tarantool with some regular SQL database, such as MySQL or PostgreSQL, and compare the results. However, I’m not a big fan of wasting my time, so I came up with another option. Why not test the Nginx + PHP-FPM bundle, but without Tarantool, and see how the performance behaves.For starters, let me explain why I picked exactly 50 (-c50 parameter) parallel requests for testing my server. When you’re using a single request, the test starts to repeatedly load the page. Due to network latency and non-zero request processing time, it generates a very low workload. That’s why you start increasing the number of requests and monitor test results and the server performance. As the number of parallel requests grows, so does (almost linearly) the CPU time consumed by Nginx. Once the workload is too high, the server’s not getting enough CPU resources, so some test requests lead to errors: they are either aborted by wrk on timeout, or the server throws error 502, Bad Gateway (PHP-FPM in our case).The main takeaway from the paragraph above is that the test parameters were carefully chosen specifically for my hosting and test server configurations. Testing another bundle, say, over a LAN would require a completely different set of parameters.Let’s take a look at the bar chart — and then I’ll tell you a couple of really interesting things.So, calls to Tarantool were replaced with the following graceless stub:Also, I commented out or removed all the Tarantool references from the script and ran it. As you can see in the diagram above (blue column, nginx+php), with Tarantool removed and 50 requests issued simultaneously, the server received 1,150 RPS, which is a 30% speed gain as compared to the previous 879 RPS. Isn’t that cool? Not really! In fact, this result doesn’t tell you anything, since the test was initially designed in such a way that the site workload reaches 100%. But now that we got rid of one resource-intensive process (consuming about 30% of CPU time), the site’s no longer 100% loaded. Fancy a little test?The blue bar continues to grow steadily as the server workload increases. With 150 parallel request, the server receives almost 3,000 RPS, which is slightly more than three times the result obtained with Tarantool. Now that’s more like it.By the way, why did the server performance triple with Tarantool disabled, although it was using only 30% of CPU time? The answer is simple: with Tarantool out of the bundle, the workload on PHP-FPM workers decreased as well. The workload grew, because Nginx was consuming more CPU resources now. This workload was driven by the number of parallel requests that I was increasing until errors started to pop up.One curious thing I’d like to mention here. What’s Tarantool+Connect in the chart above? As usual, you stumble upon interesting findings purely by chance. It happened when I disabled all the Tarantool procedure calls and ran the test — somehow the Tarantool process was still devouring a huge amount of CPU time. It turned out I’d forgotten to comment out this snippet that initializes a connection:In the diagram, Tarantool+Connect shows the server performance with a connection initialized, but without any computations performed. As I found out, in the demo application I built, it is connection initialization, and not computations per se, that accounts for a greater part of CPU consumption by the Tarantool process. In my test, Tarantool+Connect alone takes up 20% of CPU time, whereas fully functional Tarantool consumes 28%.What’s the takeaway here? Perhaps initializing a Tarantool connection is a resource-intensive operation, or PHP driver isn’t optimized properly. What’s important is that a daemon written in C, Java or Go would take four times less CPU resources to initialize such a connection. You need to keep that in mind when building applications.Finally, the last test that, although pretty simple, is very interesting for developers. As you already know, Tarantool ensures data safety via two mechanisms: snapshotting, which regularly creates and saves memory snapshots, and write-ahead log (WAL), which writes each change to a special change log. Thus, in case of a sudden server failure or shutdown, all the data can be restored at system restart.When I tested the server with the WAL disabled and 50 requests issued in parallel, the performance went up to 963 RPS, which is to be expected: not saving an extra log file on disk should speed up the system that’s 100% loaded. However, such performance gain is insignificant and not worth the price you have to pay for it. It’s better to be sure your precious data is safe.An all-too-common idea that used to be thrown around in the web development community was “why create a web frontend in a fast programming language if databases are still slow.” Nowadays, with more powerful hardware, virtualization and NoSQL solutions, databases cease to be an application bottleneck.I’ve yet to find an answer to one important question: is Tarantool really as reliable as its developers make it seem? What if it’s not? I’d like to find out how good Tarantool is at data loss prevention by “breaking” it. But to achieve it, I need all the help and advice I can get from skeptics, competitors and ordinary haters of Mail.Ru Group, so that I can model really tough conditions! “Plato is my friend, but truth is a better friend,” as the saying goes.Oh, and don’t forget to vote on my demo site. Otherwise, I’ll be forced to post one and the same racoon from the Top Picks section."
  }
]